<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#
var props = new[]
{
  new {Key="System.Web.Routing.RequestContext", Type="RequestContext", Name="RequestContext"},
  new {Key="System.Web.HttpContextBase", Type="HttpContextBase", Name="HttpContextBase"},
};
var lengths = props.GroupBy(prop=>prop.Key.Length);
#>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Routing;

namespace Katana.Server.AspNet.CallEnvironment
{
	public partial class AspNetEnvironment
	{
<# foreach(var prop in props) { #>
        public <#=prop.Type#> <#=prop.Name#> {get;set;}
<# } #>

        bool PropertiesContainsKey(string key)
        {
            switch(key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        bool PropertiesTryGetValue(string key, out object value)
        {
            switch(key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal)) 
                    {
                        value = <#=prop.Name#>;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            value = null;
            return false;
        }

        bool PropertiesTrySetValue(string key, object value)
        {
            switch(key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal)) 
                    {
                        <#=prop.Name#> = (<#=prop.Type#>)value;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        bool PropertiesTryRemove(string key)
        {
            switch(key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal)) 
                    {
                        <#=prop.Name#> = null;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }
        static string[] _knownKeys = new []
        {
<# foreach(var prop in props) { #>
            "<#=prop.Key#>",
<# } #>
        };

        IEnumerable<string> PropertiesKeys()
        {
            return _knownKeys;
        }

        ICollection<object> PropertiesValues()
        {
            return new object[]
            {
<# foreach(var prop in props) { #>
                <#=prop.Name#>,
<# } #>
            };
        }
	}
}
