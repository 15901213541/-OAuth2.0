<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#
var props = new[]
{
// owin standard keys
  new {Key="owin.Version", Type="string", Name="OwinVersion", Init="null"},
  new {Key="owin.CallCancelled", Type="CancellationToken", Name="CallCancelled", Init="default(CancellationToken)"},

  new {Key="owin.RequestProtocol", Type="string", Name="RequestProtocol", Init="_httpRequest.ServerVariables[\"SERVER_PROTOCOL\"]"},
  new {Key="owin.RequestMethod", Type="string", Name="RequestMethod", Init="null"},
  new {Key="owin.RequestScheme", Type="string", Name="RequestScheme", Init="null"},
  new {Key="owin.RequestPathBase", Type="string", Name="RequestPathBase", Init="null"},
  new {Key="owin.RequestPath", Type="string", Name="RequestPath", Init="null"},
  new {Key="owin.RequestQueryString", Type="string", Name="RequestQueryString", Init="null"},
  new {Key="owin.RequestHeaders", Type="IDictionary<string, string[]>", Name="RequestHeaders", Init="null"},
  new {Key="owin.RequestBody", Type="Stream", Name="RequestBody", Init="null"},

  new {Key="owin.ResponseStatusCode", Type="int", Name="ResponseStatusCode", Init="0"},
  new {Key="owin.ResponseReasonPhrase", Type="string", Name="ResponseReasonPhrase", Init="null"},
  new {Key="owin.ResponseHeaders", Type="IDictionary<string, string[]>", Name="ResponseHeaders", Init="null"},
  new {Key="owin.ResponseBody", Type="Stream", Name="ResponseBody", Init="null"},
  
// defacto host keys
  new {Key="host.TraceOutput", Type="TextWriter", Name="HostTraceOutput", Init="null"},
  new {Key="host.AppName", Type="string", Name="HostAppName", Init="null"},
  new {Key="host.AppMode", Type="string", Name="HostAppMode", Init="null"},
  new {Key="host.OnAppDisposing", Type="CancellationToken", Name="OnAppDisposing", Init="default(CancellationToken)"},
  new {Key="server.DisableResponseBuffering", Type="Action", Name="ServerDisableResponseBuffering", Init="null"},
  new {Key="server.User", Type="System.Security.Principal.IPrincipal", Name="ServerUser", Init="null"},
  new {Key="server.OnSendingHeaders", Type="Action<Action<object>, object>", Name="OnSendingHeaders", Init="null"},
  new {Key="server.Capabilities", Type="IDictionary<string, object>", Name="ServerCapabilities", Init="null"},

// ServerVariable keys
  new {Key="server.RemoteIpAddress", Type="string", Name="ServerRemoteIpAddress", Init="_httpRequest.ServerVariables[\"REMOTE_ADDR\"]"},
  new {Key="server.RemotePort", Type="string", Name="ServerRemotePort", Init="_httpRequest.ServerVariables[\"REMOTE_PORT\"]"},
  new {Key="server.LocalIpAddress", Type="string", Name="ServerLocalIpAddress", Init="_httpRequest.ServerVariables[\"LOCAL_ADDR\"]"},
  new {Key="server.LocalPort", Type="string", Name="ServerLocalPort", Init="_httpRequest.ServerVariables[\"SERVER_PORT\"]"},
  new {Key="server.IsLocal", Type="bool", Name="ServerIsLocal", Init="_httpRequest.IsLocal"},
  
// SSL
  new { Key="ssl.ClientCertificate", Type="X509Certificate", Name="ClientCert", Init="null" },
  new { Key="ssl.LoadClientCertAsync", Type="Func<Task>", Name="LoadClientCert", Init="null" },

// SendFile keys
  new {Key="sendfile.SendAsync", Type="Func<string, long, long?, Task>", Name="SendFileAsync", Init="null"},

// WebSocket keys
  new {Key="websocket.Accept", Type="object", Name="WebSocketAccept", Init="null"},

// aspnet-specific keys
  new {Key="System.Web.Routing.RequestContext", Type="RequestContext", Name="RequestContext", Init="null"},
  new {Key="System.Web.HttpContextBase", Type="HttpContextBase", Name="HttpContextBase", Init="null"},

}.Select((prop, Index)=>new {prop.Key, prop.Type, prop.Name, prop.Init, Index});

var lengths = props.GroupBy(prop=>prop.Key.Length);


Func<int,string> IsSet = Index => "((_flag" + (Index / 32) + " & 0x" + (1<<(Index % 32)).ToString("x") + "u) != 0)";
Func<int,string> Set = Index => "_flag" + (Index / 32) + " |= 0x" + (1<<(Index % 32)).ToString("x") + "u";
Func<int,string> Clear = Index => "_flag" + (Index / 32) + " &= ~0x" + (1<<(Index % 32)).ToString("x") + "u";

Func<int,string> IsInit = Index => "((_initFlag" + (Index / 32) + " & 0x" + (1<<(Index % 32)).ToString("x") + "u) != 0)";
Func<int,string> Init = Index => "_initFlag" + (Index / 32) + " |= 0x" + (1<<(Index % 32)).ToString("x") + "u";

#>
//-----------------------------------------------------------------------
// <copyright>
//   Copyright (c) Katana Contributors. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated />

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Web.Routing;

namespace Microsoft.Owin.Host.SystemWeb.CallEnvironment
{
    [GeneratedCode("TextTemplatingFileGenerator", "")]
    internal partial class AspNetDictionary
    {
        private UInt32 _flag0, _flag1;
		private UInt32 _initFlag0, _initFlag1;

<# foreach(var prop in props) { #>
        private <#=prop.Type#> _<#=prop.Name#>;
<# } #>

<# foreach(var prop in props) { #>
        internal <#=prop.Type#> <#=prop.Name#>
        {
            get
			{
				if (!<#=IsInit(prop.Index)#>)
				{
					_<#=prop.Name#> = <#=prop.Init#>;
					if (_<#=prop.Name#> != default(<#=prop.Type#>))
					{
						<#=Set(prop.Index)#>;
					}
					<#=Init(prop.Index)#>;
				}
				return _<#=prop.Name#>;
			}
            set
            {
				<#=Init(prop.Index)#>;
                _<#=prop.Name#> = value;
				if (_<#=prop.Name#> != default(<#=prop.Type#>))
				{
					<#=Set(prop.Index)#>;
				}
				else
				{
					<#=Clear(prop.Index)#>;
				}
            }
        }

<# } #>
        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (!<#=IsInit(prop.Index)#> && string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = <#=prop.Name#>;
                    }
                    if (<#=IsSet(prop.Index)#> && string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal))
                    {
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out object value)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (!<#=IsInit(prop.Index)#> && string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = <#=prop.Name#>;
                    }
                    if (<#=IsSet(prop.Index)#> && string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal))
                    {
                        value = <#=prop.Name#>;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            value = null;
            return false;
        }

        private bool PropertiesTrySetValue(string key, object value)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal))
                    {
                        <#=prop.Name#> = (<#=prop.Type#>)value;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if ((<#=IsSet(prop.Index)#> || !<#=IsInit(prop.Index)#>) && string.Equals(key, "<#=prop.Key#>", StringComparison.Ordinal))
                    {
						<#=Init(prop.Index)#>;
                        <#=prop.Name#> = default(<#=prop.Type#>);
                        <#=Clear(prop.Index)#>;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
<# foreach(var prop in props) { #>
			if (!<#=IsInit(prop.Index)#>)
			{
				// Delay init
				object ignored = _<#=prop.Name#>;
			}
            if (<#=IsSet(prop.Index)#>)
            {
                yield return "<#=prop.Key#>";
            }
<# } #>
        }

        private IEnumerable<object> PropertiesValues()
        {
<# foreach(var prop in props) { #>
			if (!<#=IsInit(prop.Index)#>)
			{
				// Delay init
				object ignored = _<#=prop.Name#>;
			}
            if (<#=IsSet(prop.Index)#> || !<#=IsInit(prop.Index)#>)
            {
                yield return <#=prop.Name#>;
            }
<# } #>
        }

        private IEnumerable<KeyValuePair<string, object>> PropertiesEnumerable()
        {
<# foreach(var prop in props) { #>
			if (!<#=IsInit(prop.Index)#>)
			{
				// Delay init
				object ignored = _<#=prop.Name#>;
			}
            if (<#=IsSet(prop.Index)#>)
            {
                yield return new KeyValuePair<string, object>("<#=prop.Key#>", <#=prop.Name#>);
            }
<# } #>
        }
    }
}
