//-----------------------------------------------------------------------
// <copyright>
//   Copyright (c) Katana Contributors. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated />

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Web.Routing;

namespace Microsoft.Owin.Host.SystemWeb.CallEnvironment
{
    [GeneratedCode("TextTemplatingFileGenerator", "")]
    internal partial class AspNetDictionary
    {
        private UInt32 _flag0, _flag1;
		private UInt32 _initFlag0, _initFlag1;

        private string _OwinVersion;
        private CancellationToken _CallCancelled;
        private string _RequestProtocol;
        private string _RequestMethod;
        private string _RequestScheme;
        private string _RequestPathBase;
        private string _RequestPath;
        private string _RequestQueryString;
        private IDictionary<string, string[]> _RequestHeaders;
        private Stream _RequestBody;
        private int _ResponseStatusCode;
        private string _ResponseReasonPhrase;
        private IDictionary<string, string[]> _ResponseHeaders;
        private Stream _ResponseBody;
        private TextWriter _HostTraceOutput;
        private string _HostAppName;
        private string _HostAppMode;
        private CancellationToken _OnAppDisposing;
        private Action _ServerDisableResponseBuffering;
        private System.Security.Principal.IPrincipal _ServerUser;
        private Action<Action<object>, object> _OnSendingHeaders;
        private IDictionary<string, object> _ServerCapabilities;
        private string _ServerRemoteIpAddress;
        private string _ServerRemotePort;
        private string _ServerLocalIpAddress;
        private string _ServerLocalPort;
        private bool _ServerIsLocal;
        private X509Certificate _ClientCert;
        private Func<Task> _LoadClientCert;
        private Func<string, long, long?, Task> _SendFileAsync;
        private object _WebSocketAccept;
        private RequestContext _RequestContext;
        private HttpContextBase _HttpContextBase;

        internal string OwinVersion
        {
            get
			{
				if (!((_initFlag0 & 0x1u) != 0))
				{
					_OwinVersion = null;
					if (_OwinVersion != default(string))
					{
						_flag0 |= 0x1u;
					}
					_initFlag0 |= 0x1u;
				}
				return _OwinVersion;
			}
            set
            {
				_initFlag0 |= 0x1u;
                _OwinVersion = value;
				if (_OwinVersion != default(string))
				{
					_flag0 |= 0x1u;
				}
				else
				{
					_flag0 &= ~0x1u;
				}
            }
        }

        internal CancellationToken CallCancelled
        {
            get
			{
				if (!((_initFlag0 & 0x2u) != 0))
				{
					_CallCancelled = default(CancellationToken);
					if (_CallCancelled != default(CancellationToken))
					{
						_flag0 |= 0x2u;
					}
					_initFlag0 |= 0x2u;
				}
				return _CallCancelled;
			}
            set
            {
				_initFlag0 |= 0x2u;
                _CallCancelled = value;
				if (_CallCancelled != default(CancellationToken))
				{
					_flag0 |= 0x2u;
				}
				else
				{
					_flag0 &= ~0x2u;
				}
            }
        }

        internal string RequestProtocol
        {
            get
			{
				if (!((_initFlag0 & 0x4u) != 0))
				{
					_RequestProtocol = _httpRequest.ServerVariables["SERVER_PROTOCOL"];
					if (_RequestProtocol != default(string))
					{
						_flag0 |= 0x4u;
					}
					_initFlag0 |= 0x4u;
				}
				return _RequestProtocol;
			}
            set
            {
				_initFlag0 |= 0x4u;
                _RequestProtocol = value;
				if (_RequestProtocol != default(string))
				{
					_flag0 |= 0x4u;
				}
				else
				{
					_flag0 &= ~0x4u;
				}
            }
        }

        internal string RequestMethod
        {
            get
			{
				if (!((_initFlag0 & 0x8u) != 0))
				{
					_RequestMethod = null;
					if (_RequestMethod != default(string))
					{
						_flag0 |= 0x8u;
					}
					_initFlag0 |= 0x8u;
				}
				return _RequestMethod;
			}
            set
            {
				_initFlag0 |= 0x8u;
                _RequestMethod = value;
				if (_RequestMethod != default(string))
				{
					_flag0 |= 0x8u;
				}
				else
				{
					_flag0 &= ~0x8u;
				}
            }
        }

        internal string RequestScheme
        {
            get
			{
				if (!((_initFlag0 & 0x10u) != 0))
				{
					_RequestScheme = null;
					if (_RequestScheme != default(string))
					{
						_flag0 |= 0x10u;
					}
					_initFlag0 |= 0x10u;
				}
				return _RequestScheme;
			}
            set
            {
				_initFlag0 |= 0x10u;
                _RequestScheme = value;
				if (_RequestScheme != default(string))
				{
					_flag0 |= 0x10u;
				}
				else
				{
					_flag0 &= ~0x10u;
				}
            }
        }

        internal string RequestPathBase
        {
            get
			{
				if (!((_initFlag0 & 0x20u) != 0))
				{
					_RequestPathBase = null;
					if (_RequestPathBase != default(string))
					{
						_flag0 |= 0x20u;
					}
					_initFlag0 |= 0x20u;
				}
				return _RequestPathBase;
			}
            set
            {
				_initFlag0 |= 0x20u;
                _RequestPathBase = value;
				if (_RequestPathBase != default(string))
				{
					_flag0 |= 0x20u;
				}
				else
				{
					_flag0 &= ~0x20u;
				}
            }
        }

        internal string RequestPath
        {
            get
			{
				if (!((_initFlag0 & 0x40u) != 0))
				{
					_RequestPath = null;
					if (_RequestPath != default(string))
					{
						_flag0 |= 0x40u;
					}
					_initFlag0 |= 0x40u;
				}
				return _RequestPath;
			}
            set
            {
				_initFlag0 |= 0x40u;
                _RequestPath = value;
				if (_RequestPath != default(string))
				{
					_flag0 |= 0x40u;
				}
				else
				{
					_flag0 &= ~0x40u;
				}
            }
        }

        internal string RequestQueryString
        {
            get
			{
				if (!((_initFlag0 & 0x80u) != 0))
				{
					_RequestQueryString = null;
					if (_RequestQueryString != default(string))
					{
						_flag0 |= 0x80u;
					}
					_initFlag0 |= 0x80u;
				}
				return _RequestQueryString;
			}
            set
            {
				_initFlag0 |= 0x80u;
                _RequestQueryString = value;
				if (_RequestQueryString != default(string))
				{
					_flag0 |= 0x80u;
				}
				else
				{
					_flag0 &= ~0x80u;
				}
            }
        }

        internal IDictionary<string, string[]> RequestHeaders
        {
            get
			{
				if (!((_initFlag0 & 0x100u) != 0))
				{
					_RequestHeaders = null;
					if (_RequestHeaders != default(IDictionary<string, string[]>))
					{
						_flag0 |= 0x100u;
					}
					_initFlag0 |= 0x100u;
				}
				return _RequestHeaders;
			}
            set
            {
				_initFlag0 |= 0x100u;
                _RequestHeaders = value;
				if (_RequestHeaders != default(IDictionary<string, string[]>))
				{
					_flag0 |= 0x100u;
				}
				else
				{
					_flag0 &= ~0x100u;
				}
            }
        }

        internal Stream RequestBody
        {
            get
			{
				if (!((_initFlag0 & 0x200u) != 0))
				{
					_RequestBody = null;
					if (_RequestBody != default(Stream))
					{
						_flag0 |= 0x200u;
					}
					_initFlag0 |= 0x200u;
				}
				return _RequestBody;
			}
            set
            {
				_initFlag0 |= 0x200u;
                _RequestBody = value;
				if (_RequestBody != default(Stream))
				{
					_flag0 |= 0x200u;
				}
				else
				{
					_flag0 &= ~0x200u;
				}
            }
        }

        internal int ResponseStatusCode
        {
            get
			{
				if (!((_initFlag0 & 0x400u) != 0))
				{
					_ResponseStatusCode = 0;
					if (_ResponseStatusCode != default(int))
					{
						_flag0 |= 0x400u;
					}
					_initFlag0 |= 0x400u;
				}
				return _ResponseStatusCode;
			}
            set
            {
				_initFlag0 |= 0x400u;
                _ResponseStatusCode = value;
				if (_ResponseStatusCode != default(int))
				{
					_flag0 |= 0x400u;
				}
				else
				{
					_flag0 &= ~0x400u;
				}
            }
        }

        internal string ResponseReasonPhrase
        {
            get
			{
				if (!((_initFlag0 & 0x800u) != 0))
				{
					_ResponseReasonPhrase = null;
					if (_ResponseReasonPhrase != default(string))
					{
						_flag0 |= 0x800u;
					}
					_initFlag0 |= 0x800u;
				}
				return _ResponseReasonPhrase;
			}
            set
            {
				_initFlag0 |= 0x800u;
                _ResponseReasonPhrase = value;
				if (_ResponseReasonPhrase != default(string))
				{
					_flag0 |= 0x800u;
				}
				else
				{
					_flag0 &= ~0x800u;
				}
            }
        }

        internal IDictionary<string, string[]> ResponseHeaders
        {
            get
			{
				if (!((_initFlag0 & 0x1000u) != 0))
				{
					_ResponseHeaders = null;
					if (_ResponseHeaders != default(IDictionary<string, string[]>))
					{
						_flag0 |= 0x1000u;
					}
					_initFlag0 |= 0x1000u;
				}
				return _ResponseHeaders;
			}
            set
            {
				_initFlag0 |= 0x1000u;
                _ResponseHeaders = value;
				if (_ResponseHeaders != default(IDictionary<string, string[]>))
				{
					_flag0 |= 0x1000u;
				}
				else
				{
					_flag0 &= ~0x1000u;
				}
            }
        }

        internal Stream ResponseBody
        {
            get
			{
				if (!((_initFlag0 & 0x2000u) != 0))
				{
					_ResponseBody = null;
					if (_ResponseBody != default(Stream))
					{
						_flag0 |= 0x2000u;
					}
					_initFlag0 |= 0x2000u;
				}
				return _ResponseBody;
			}
            set
            {
				_initFlag0 |= 0x2000u;
                _ResponseBody = value;
				if (_ResponseBody != default(Stream))
				{
					_flag0 |= 0x2000u;
				}
				else
				{
					_flag0 &= ~0x2000u;
				}
            }
        }

        internal TextWriter HostTraceOutput
        {
            get
			{
				if (!((_initFlag0 & 0x4000u) != 0))
				{
					_HostTraceOutput = null;
					if (_HostTraceOutput != default(TextWriter))
					{
						_flag0 |= 0x4000u;
					}
					_initFlag0 |= 0x4000u;
				}
				return _HostTraceOutput;
			}
            set
            {
				_initFlag0 |= 0x4000u;
                _HostTraceOutput = value;
				if (_HostTraceOutput != default(TextWriter))
				{
					_flag0 |= 0x4000u;
				}
				else
				{
					_flag0 &= ~0x4000u;
				}
            }
        }

        internal string HostAppName
        {
            get
			{
				if (!((_initFlag0 & 0x8000u) != 0))
				{
					_HostAppName = null;
					if (_HostAppName != default(string))
					{
						_flag0 |= 0x8000u;
					}
					_initFlag0 |= 0x8000u;
				}
				return _HostAppName;
			}
            set
            {
				_initFlag0 |= 0x8000u;
                _HostAppName = value;
				if (_HostAppName != default(string))
				{
					_flag0 |= 0x8000u;
				}
				else
				{
					_flag0 &= ~0x8000u;
				}
            }
        }

        internal string HostAppMode
        {
            get
			{
				if (!((_initFlag0 & 0x10000u) != 0))
				{
					_HostAppMode = null;
					if (_HostAppMode != default(string))
					{
						_flag0 |= 0x10000u;
					}
					_initFlag0 |= 0x10000u;
				}
				return _HostAppMode;
			}
            set
            {
				_initFlag0 |= 0x10000u;
                _HostAppMode = value;
				if (_HostAppMode != default(string))
				{
					_flag0 |= 0x10000u;
				}
				else
				{
					_flag0 &= ~0x10000u;
				}
            }
        }

        internal CancellationToken OnAppDisposing
        {
            get
			{
				if (!((_initFlag0 & 0x20000u) != 0))
				{
					_OnAppDisposing = default(CancellationToken);
					if (_OnAppDisposing != default(CancellationToken))
					{
						_flag0 |= 0x20000u;
					}
					_initFlag0 |= 0x20000u;
				}
				return _OnAppDisposing;
			}
            set
            {
				_initFlag0 |= 0x20000u;
                _OnAppDisposing = value;
				if (_OnAppDisposing != default(CancellationToken))
				{
					_flag0 |= 0x20000u;
				}
				else
				{
					_flag0 &= ~0x20000u;
				}
            }
        }

        internal Action ServerDisableResponseBuffering
        {
            get
			{
				if (!((_initFlag0 & 0x40000u) != 0))
				{
					_ServerDisableResponseBuffering = null;
					if (_ServerDisableResponseBuffering != default(Action))
					{
						_flag0 |= 0x40000u;
					}
					_initFlag0 |= 0x40000u;
				}
				return _ServerDisableResponseBuffering;
			}
            set
            {
				_initFlag0 |= 0x40000u;
                _ServerDisableResponseBuffering = value;
				if (_ServerDisableResponseBuffering != default(Action))
				{
					_flag0 |= 0x40000u;
				}
				else
				{
					_flag0 &= ~0x40000u;
				}
            }
        }

        internal System.Security.Principal.IPrincipal ServerUser
        {
            get
			{
				if (!((_initFlag0 & 0x80000u) != 0))
				{
					_ServerUser = null;
					if (_ServerUser != default(System.Security.Principal.IPrincipal))
					{
						_flag0 |= 0x80000u;
					}
					_initFlag0 |= 0x80000u;
				}
				return _ServerUser;
			}
            set
            {
				_initFlag0 |= 0x80000u;
                _ServerUser = value;
				if (_ServerUser != default(System.Security.Principal.IPrincipal))
				{
					_flag0 |= 0x80000u;
				}
				else
				{
					_flag0 &= ~0x80000u;
				}
            }
        }

        internal Action<Action<object>, object> OnSendingHeaders
        {
            get
			{
				if (!((_initFlag0 & 0x100000u) != 0))
				{
					_OnSendingHeaders = null;
					if (_OnSendingHeaders != default(Action<Action<object>, object>))
					{
						_flag0 |= 0x100000u;
					}
					_initFlag0 |= 0x100000u;
				}
				return _OnSendingHeaders;
			}
            set
            {
				_initFlag0 |= 0x100000u;
                _OnSendingHeaders = value;
				if (_OnSendingHeaders != default(Action<Action<object>, object>))
				{
					_flag0 |= 0x100000u;
				}
				else
				{
					_flag0 &= ~0x100000u;
				}
            }
        }

        internal IDictionary<string, object> ServerCapabilities
        {
            get
			{
				if (!((_initFlag0 & 0x200000u) != 0))
				{
					_ServerCapabilities = null;
					if (_ServerCapabilities != default(IDictionary<string, object>))
					{
						_flag0 |= 0x200000u;
					}
					_initFlag0 |= 0x200000u;
				}
				return _ServerCapabilities;
			}
            set
            {
				_initFlag0 |= 0x200000u;
                _ServerCapabilities = value;
				if (_ServerCapabilities != default(IDictionary<string, object>))
				{
					_flag0 |= 0x200000u;
				}
				else
				{
					_flag0 &= ~0x200000u;
				}
            }
        }

        internal string ServerRemoteIpAddress
        {
            get
			{
				if (!((_initFlag0 & 0x400000u) != 0))
				{
					_ServerRemoteIpAddress = _httpRequest.ServerVariables["REMOTE_ADDR"];
					if (_ServerRemoteIpAddress != default(string))
					{
						_flag0 |= 0x400000u;
					}
					_initFlag0 |= 0x400000u;
				}
				return _ServerRemoteIpAddress;
			}
            set
            {
				_initFlag0 |= 0x400000u;
                _ServerRemoteIpAddress = value;
				if (_ServerRemoteIpAddress != default(string))
				{
					_flag0 |= 0x400000u;
				}
				else
				{
					_flag0 &= ~0x400000u;
				}
            }
        }

        internal string ServerRemotePort
        {
            get
			{
				if (!((_initFlag0 & 0x800000u) != 0))
				{
					_ServerRemotePort = _httpRequest.ServerVariables["REMOTE_PORT"];
					if (_ServerRemotePort != default(string))
					{
						_flag0 |= 0x800000u;
					}
					_initFlag0 |= 0x800000u;
				}
				return _ServerRemotePort;
			}
            set
            {
				_initFlag0 |= 0x800000u;
                _ServerRemotePort = value;
				if (_ServerRemotePort != default(string))
				{
					_flag0 |= 0x800000u;
				}
				else
				{
					_flag0 &= ~0x800000u;
				}
            }
        }

        internal string ServerLocalIpAddress
        {
            get
			{
				if (!((_initFlag0 & 0x1000000u) != 0))
				{
					_ServerLocalIpAddress = _httpRequest.ServerVariables["LOCAL_ADDR"];
					if (_ServerLocalIpAddress != default(string))
					{
						_flag0 |= 0x1000000u;
					}
					_initFlag0 |= 0x1000000u;
				}
				return _ServerLocalIpAddress;
			}
            set
            {
				_initFlag0 |= 0x1000000u;
                _ServerLocalIpAddress = value;
				if (_ServerLocalIpAddress != default(string))
				{
					_flag0 |= 0x1000000u;
				}
				else
				{
					_flag0 &= ~0x1000000u;
				}
            }
        }

        internal string ServerLocalPort
        {
            get
			{
				if (!((_initFlag0 & 0x2000000u) != 0))
				{
					_ServerLocalPort = _httpRequest.ServerVariables["SERVER_PORT"];
					if (_ServerLocalPort != default(string))
					{
						_flag0 |= 0x2000000u;
					}
					_initFlag0 |= 0x2000000u;
				}
				return _ServerLocalPort;
			}
            set
            {
				_initFlag0 |= 0x2000000u;
                _ServerLocalPort = value;
				if (_ServerLocalPort != default(string))
				{
					_flag0 |= 0x2000000u;
				}
				else
				{
					_flag0 &= ~0x2000000u;
				}
            }
        }

        internal bool ServerIsLocal
        {
            get
			{
				if (!((_initFlag0 & 0x4000000u) != 0))
				{
					_ServerIsLocal = _httpRequest.IsLocal;
					if (_ServerIsLocal != default(bool))
					{
						_flag0 |= 0x4000000u;
					}
					_initFlag0 |= 0x4000000u;
				}
				return _ServerIsLocal;
			}
            set
            {
				_initFlag0 |= 0x4000000u;
                _ServerIsLocal = value;
				if (_ServerIsLocal != default(bool))
				{
					_flag0 |= 0x4000000u;
				}
				else
				{
					_flag0 &= ~0x4000000u;
				}
            }
        }

        internal X509Certificate ClientCert
        {
            get
			{
				if (!((_initFlag0 & 0x8000000u) != 0))
				{
					_ClientCert = null;
					if (_ClientCert != default(X509Certificate))
					{
						_flag0 |= 0x8000000u;
					}
					_initFlag0 |= 0x8000000u;
				}
				return _ClientCert;
			}
            set
            {
				_initFlag0 |= 0x8000000u;
                _ClientCert = value;
				if (_ClientCert != default(X509Certificate))
				{
					_flag0 |= 0x8000000u;
				}
				else
				{
					_flag0 &= ~0x8000000u;
				}
            }
        }

        internal Func<Task> LoadClientCert
        {
            get
			{
				if (!((_initFlag0 & 0x10000000u) != 0))
				{
					_LoadClientCert = null;
					if (_LoadClientCert != default(Func<Task>))
					{
						_flag0 |= 0x10000000u;
					}
					_initFlag0 |= 0x10000000u;
				}
				return _LoadClientCert;
			}
            set
            {
				_initFlag0 |= 0x10000000u;
                _LoadClientCert = value;
				if (_LoadClientCert != default(Func<Task>))
				{
					_flag0 |= 0x10000000u;
				}
				else
				{
					_flag0 &= ~0x10000000u;
				}
            }
        }

        internal Func<string, long, long?, Task> SendFileAsync
        {
            get
			{
				if (!((_initFlag0 & 0x20000000u) != 0))
				{
					_SendFileAsync = null;
					if (_SendFileAsync != default(Func<string, long, long?, Task>))
					{
						_flag0 |= 0x20000000u;
					}
					_initFlag0 |= 0x20000000u;
				}
				return _SendFileAsync;
			}
            set
            {
				_initFlag0 |= 0x20000000u;
                _SendFileAsync = value;
				if (_SendFileAsync != default(Func<string, long, long?, Task>))
				{
					_flag0 |= 0x20000000u;
				}
				else
				{
					_flag0 &= ~0x20000000u;
				}
            }
        }

        internal object WebSocketAccept
        {
            get
			{
				if (!((_initFlag0 & 0x40000000u) != 0))
				{
					_WebSocketAccept = null;
					if (_WebSocketAccept != default(object))
					{
						_flag0 |= 0x40000000u;
					}
					_initFlag0 |= 0x40000000u;
				}
				return _WebSocketAccept;
			}
            set
            {
				_initFlag0 |= 0x40000000u;
                _WebSocketAccept = value;
				if (_WebSocketAccept != default(object))
				{
					_flag0 |= 0x40000000u;
				}
				else
				{
					_flag0 &= ~0x40000000u;
				}
            }
        }

        internal RequestContext RequestContext
        {
            get
			{
				if (!((_initFlag0 & 0x80000000u) != 0))
				{
					_RequestContext = null;
					if (_RequestContext != default(RequestContext))
					{
						_flag0 |= 0x80000000u;
					}
					_initFlag0 |= 0x80000000u;
				}
				return _RequestContext;
			}
            set
            {
				_initFlag0 |= 0x80000000u;
                _RequestContext = value;
				if (_RequestContext != default(RequestContext))
				{
					_flag0 |= 0x80000000u;
				}
				else
				{
					_flag0 &= ~0x80000000u;
				}
            }
        }

        internal HttpContextBase HttpContextBase
        {
            get
			{
				if (!((_initFlag1 & 0x1u) != 0))
				{
					_HttpContextBase = null;
					if (_HttpContextBase != default(HttpContextBase))
					{
						_flag1 |= 0x1u;
					}
					_initFlag1 |= 0x1u;
				}
				return _HttpContextBase;
			}
            set
            {
				_initFlag1 |= 0x1u;
                _HttpContextBase = value;
				if (_HttpContextBase != default(HttpContextBase))
				{
					_flag1 |= 0x1u;
				}
				else
				{
					_flag1 &= ~0x1u;
				}
            }
        }

        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
                case 12:
                    if (!((_initFlag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = OwinVersion;
                    }
                    if (((_flag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HostAppName;
                    }
                    if (((_flag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HostAppMode;
                    }
                    if (((_flag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 18:
                    if (!((_initFlag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = CallCancelled;
                    }
                    if (((_flag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestMethod;
                    }
                    if (((_flag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestScheme;
                    }
                    if (((_flag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x20000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = SendFileAsync;
                    }
                    if (((_flag0 & 0x20000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 20:
                    if (!((_initFlag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestProtocol;
                    }
                    if (((_flag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestPathBase;
                    }
                    if (((_flag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseHeaders;
                    }
                    if (((_flag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 16:
                    if (!((_initFlag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestPath;
                    }
                    if (((_flag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestBody;
                    }
                    if (((_flag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HostTraceOutput;
                    }
                    if (((_flag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x2000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerLocalPort;
                    }
                    if (((_flag0 & 0x2000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x40000000u) != 0) && string.Equals(key, "websocket.Accept", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = WebSocketAccept;
                    }
                    if (((_flag0 & 0x40000000u) != 0) && string.Equals(key, "websocket.Accept", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 23:
                    if (!((_initFlag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestQueryString;
                    }
                    if (((_flag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseStatusCode;
                    }
                    if (((_flag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x100000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = OnSendingHeaders;
                    }
                    if (((_flag0 & 0x100000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = LoadClientCert;
                    }
                    if (((_flag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 19:
                    if (!((_initFlag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestHeaders;
                    }
                    if (((_flag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = OnAppDisposing;
                    }
                    if (((_flag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x200000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerCapabilities;
                    }
                    if (((_flag0 & 0x200000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 25:
                    if (!((_initFlag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseReasonPhrase;
                    }
                    if (((_flag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 17:
                    if (!((_initFlag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseBody;
                    }
                    if (((_flag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x800000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerRemotePort;
                    }
                    if (((_flag0 & 0x800000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 31:
                    if (!((_initFlag0 & 0x40000u) != 0) && string.Equals(key, "server.DisableResponseBuffering", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerDisableResponseBuffering;
                    }
                    if (((_flag0 & 0x40000u) != 0) && string.Equals(key, "server.DisableResponseBuffering", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 11:
                    if (!((_initFlag0 & 0x80000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerUser;
                    }
                    if (((_flag0 & 0x80000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 22:
                    if (!((_initFlag0 & 0x400000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerRemoteIpAddress;
                    }
                    if (((_flag0 & 0x400000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 21:
                    if (!((_initFlag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerLocalIpAddress;
                    }
                    if (((_flag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal))
                    {
                        return true;
                    }
                    if (!((_initFlag0 & 0x8000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ClientCert;
                    }
                    if (((_flag0 & 0x8000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 14:
                    if (!((_initFlag0 & 0x4000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerIsLocal;
                    }
                    if (((_flag0 & 0x4000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 33:
                    if (!((_initFlag0 & 0x80000000u) != 0) && string.Equals(key, "System.Web.Routing.RequestContext", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestContext;
                    }
                    if (((_flag0 & 0x80000000u) != 0) && string.Equals(key, "System.Web.Routing.RequestContext", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
                case 26:
                    if (!((_initFlag1 & 0x1u) != 0) && string.Equals(key, "System.Web.HttpContextBase", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HttpContextBase;
                    }
                    if (((_flag1 & 0x1u) != 0) && string.Equals(key, "System.Web.HttpContextBase", StringComparison.Ordinal))
                    {
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out object value)
        {
            switch (key.Length)
            {
                case 12:
                    if (!((_initFlag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = OwinVersion;
                    }
                    if (((_flag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal))
                    {
                        value = OwinVersion;
                        return true;
                    }
                    if (!((_initFlag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HostAppName;
                    }
                    if (((_flag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal))
                    {
                        value = HostAppName;
                        return true;
                    }
                    if (!((_initFlag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HostAppMode;
                    }
                    if (((_flag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal))
                    {
                        value = HostAppMode;
                        return true;
                    }
                   break;
                case 18:
                    if (!((_initFlag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = CallCancelled;
                    }
                    if (((_flag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal))
                    {
                        value = CallCancelled;
                        return true;
                    }
                    if (!((_initFlag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestMethod;
                    }
                    if (((_flag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal))
                    {
                        value = RequestMethod;
                        return true;
                    }
                    if (!((_initFlag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestScheme;
                    }
                    if (((_flag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal))
                    {
                        value = RequestScheme;
                        return true;
                    }
                    if (!((_initFlag0 & 0x20000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = SendFileAsync;
                    }
                    if (((_flag0 & 0x20000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal))
                    {
                        value = SendFileAsync;
                        return true;
                    }
                   break;
                case 20:
                    if (!((_initFlag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestProtocol;
                    }
                    if (((_flag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal))
                    {
                        value = RequestProtocol;
                        return true;
                    }
                    if (!((_initFlag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestPathBase;
                    }
                    if (((_flag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal))
                    {
                        value = RequestPathBase;
                        return true;
                    }
                    if (!((_initFlag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseHeaders;
                    }
                    if (((_flag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal))
                    {
                        value = ResponseHeaders;
                        return true;
                    }
                   break;
                case 16:
                    if (!((_initFlag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestPath;
                    }
                    if (((_flag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal))
                    {
                        value = RequestPath;
                        return true;
                    }
                    if (!((_initFlag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestBody;
                    }
                    if (((_flag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal))
                    {
                        value = RequestBody;
                        return true;
                    }
                    if (!((_initFlag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HostTraceOutput;
                    }
                    if (((_flag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal))
                    {
                        value = HostTraceOutput;
                        return true;
                    }
                    if (!((_initFlag0 & 0x2000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerLocalPort;
                    }
                    if (((_flag0 & 0x2000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal))
                    {
                        value = ServerLocalPort;
                        return true;
                    }
                    if (!((_initFlag0 & 0x40000000u) != 0) && string.Equals(key, "websocket.Accept", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = WebSocketAccept;
                    }
                    if (((_flag0 & 0x40000000u) != 0) && string.Equals(key, "websocket.Accept", StringComparison.Ordinal))
                    {
                        value = WebSocketAccept;
                        return true;
                    }
                   break;
                case 23:
                    if (!((_initFlag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestQueryString;
                    }
                    if (((_flag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal))
                    {
                        value = RequestQueryString;
                        return true;
                    }
                    if (!((_initFlag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseStatusCode;
                    }
                    if (((_flag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal))
                    {
                        value = ResponseStatusCode;
                        return true;
                    }
                    if (!((_initFlag0 & 0x100000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = OnSendingHeaders;
                    }
                    if (((_flag0 & 0x100000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal))
                    {
                        value = OnSendingHeaders;
                        return true;
                    }
                    if (!((_initFlag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = LoadClientCert;
                    }
                    if (((_flag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal))
                    {
                        value = LoadClientCert;
                        return true;
                    }
                   break;
                case 19:
                    if (!((_initFlag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestHeaders;
                    }
                    if (((_flag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal))
                    {
                        value = RequestHeaders;
                        return true;
                    }
                    if (!((_initFlag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = OnAppDisposing;
                    }
                    if (((_flag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal))
                    {
                        value = OnAppDisposing;
                        return true;
                    }
                    if (!((_initFlag0 & 0x200000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerCapabilities;
                    }
                    if (((_flag0 & 0x200000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal))
                    {
                        value = ServerCapabilities;
                        return true;
                    }
                   break;
                case 25:
                    if (!((_initFlag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseReasonPhrase;
                    }
                    if (((_flag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal))
                    {
                        value = ResponseReasonPhrase;
                        return true;
                    }
                   break;
                case 17:
                    if (!((_initFlag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ResponseBody;
                    }
                    if (((_flag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal))
                    {
                        value = ResponseBody;
                        return true;
                    }
                    if (!((_initFlag0 & 0x800000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerRemotePort;
                    }
                    if (((_flag0 & 0x800000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal))
                    {
                        value = ServerRemotePort;
                        return true;
                    }
                   break;
                case 31:
                    if (!((_initFlag0 & 0x40000u) != 0) && string.Equals(key, "server.DisableResponseBuffering", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerDisableResponseBuffering;
                    }
                    if (((_flag0 & 0x40000u) != 0) && string.Equals(key, "server.DisableResponseBuffering", StringComparison.Ordinal))
                    {
                        value = ServerDisableResponseBuffering;
                        return true;
                    }
                   break;
                case 11:
                    if (!((_initFlag0 & 0x80000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerUser;
                    }
                    if (((_flag0 & 0x80000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal))
                    {
                        value = ServerUser;
                        return true;
                    }
                   break;
                case 22:
                    if (!((_initFlag0 & 0x400000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerRemoteIpAddress;
                    }
                    if (((_flag0 & 0x400000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal))
                    {
                        value = ServerRemoteIpAddress;
                        return true;
                    }
                   break;
                case 21:
                    if (!((_initFlag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerLocalIpAddress;
                    }
                    if (((_flag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal))
                    {
                        value = ServerLocalIpAddress;
                        return true;
                    }
                    if (!((_initFlag0 & 0x8000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ClientCert;
                    }
                    if (((_flag0 & 0x8000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal))
                    {
                        value = ClientCert;
                        return true;
                    }
                   break;
                case 14:
                    if (!((_initFlag0 & 0x4000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = ServerIsLocal;
                    }
                    if (((_flag0 & 0x4000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal))
                    {
                        value = ServerIsLocal;
                        return true;
                    }
                   break;
                case 33:
                    if (!((_initFlag0 & 0x80000000u) != 0) && string.Equals(key, "System.Web.Routing.RequestContext", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = RequestContext;
                    }
                    if (((_flag0 & 0x80000000u) != 0) && string.Equals(key, "System.Web.Routing.RequestContext", StringComparison.Ordinal))
                    {
                        value = RequestContext;
                        return true;
                    }
                   break;
                case 26:
                    if (!((_initFlag1 & 0x1u) != 0) && string.Equals(key, "System.Web.HttpContextBase", StringComparison.Ordinal))
                    {
						// delay init
						object ignored = HttpContextBase;
                    }
                    if (((_flag1 & 0x1u) != 0) && string.Equals(key, "System.Web.HttpContextBase", StringComparison.Ordinal))
                    {
                        value = HttpContextBase;
                        return true;
                    }
                   break;
            }
            value = null;
            return false;
        }

        private bool PropertiesTrySetValue(string key, object value)
        {
            switch (key.Length)
            {
                case 12:
                    if (string.Equals(key, "owin.Version", StringComparison.Ordinal))
                    {
                        OwinVersion = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "host.AppName", StringComparison.Ordinal))
                    {
                        HostAppName = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "host.AppMode", StringComparison.Ordinal))
                    {
                        HostAppMode = (string)value;
                        return true;
                    }
                   break;
                case 18:
                    if (string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal))
                    {
                        CallCancelled = (CancellationToken)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal))
                    {
                        RequestMethod = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal))
                    {
                        RequestScheme = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal))
                    {
                        SendFileAsync = (Func<string, long, long?, Task>)value;
                        return true;
                    }
                   break;
                case 20:
                    if (string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal))
                    {
                        RequestProtocol = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal))
                    {
                        RequestPathBase = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal))
                    {
                        ResponseHeaders = (IDictionary<string, string[]>)value;
                        return true;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "owin.RequestPath", StringComparison.Ordinal))
                    {
                        RequestPath = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestBody", StringComparison.Ordinal))
                    {
                        RequestBody = (Stream)value;
                        return true;
                    }
                    if (string.Equals(key, "host.TraceOutput", StringComparison.Ordinal))
                    {
                        HostTraceOutput = (TextWriter)value;
                        return true;
                    }
                    if (string.Equals(key, "server.LocalPort", StringComparison.Ordinal))
                    {
                        ServerLocalPort = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "websocket.Accept", StringComparison.Ordinal))
                    {
                        WebSocketAccept = (object)value;
                        return true;
                    }
                   break;
                case 23:
                    if (string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal))
                    {
                        RequestQueryString = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal))
                    {
                        ResponseStatusCode = (int)value;
                        return true;
                    }
                    if (string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal))
                    {
                        OnSendingHeaders = (Action<Action<object>, object>)value;
                        return true;
                    }
                    if (string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal))
                    {
                        LoadClientCert = (Func<Task>)value;
                        return true;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal))
                    {
                        RequestHeaders = (IDictionary<string, string[]>)value;
                        return true;
                    }
                    if (string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal))
                    {
                        OnAppDisposing = (CancellationToken)value;
                        return true;
                    }
                    if (string.Equals(key, "server.Capabilities", StringComparison.Ordinal))
                    {
                        ServerCapabilities = (IDictionary<string, object>)value;
                        return true;
                    }
                   break;
                case 25:
                    if (string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal))
                    {
                        ResponseReasonPhrase = (string)value;
                        return true;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal))
                    {
                        ResponseBody = (Stream)value;
                        return true;
                    }
                    if (string.Equals(key, "server.RemotePort", StringComparison.Ordinal))
                    {
                        ServerRemotePort = (string)value;
                        return true;
                    }
                   break;
                case 31:
                    if (string.Equals(key, "server.DisableResponseBuffering", StringComparison.Ordinal))
                    {
                        ServerDisableResponseBuffering = (Action)value;
                        return true;
                    }
                   break;
                case 11:
                    if (string.Equals(key, "server.User", StringComparison.Ordinal))
                    {
                        ServerUser = (System.Security.Principal.IPrincipal)value;
                        return true;
                    }
                   break;
                case 22:
                    if (string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal))
                    {
                        ServerRemoteIpAddress = (string)value;
                        return true;
                    }
                   break;
                case 21:
                    if (string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal))
                    {
                        ServerLocalIpAddress = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal))
                    {
                        ClientCert = (X509Certificate)value;
                        return true;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "server.IsLocal", StringComparison.Ordinal))
                    {
                        ServerIsLocal = (bool)value;
                        return true;
                    }
                   break;
                case 33:
                    if (string.Equals(key, "System.Web.Routing.RequestContext", StringComparison.Ordinal))
                    {
                        RequestContext = (RequestContext)value;
                        return true;
                    }
                   break;
                case 26:
                    if (string.Equals(key, "System.Web.HttpContextBase", StringComparison.Ordinal))
                    {
                        HttpContextBase = (HttpContextBase)value;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
                case 12:
                    if ((((_flag0 & 0x1u) != 0) || !((_initFlag0 & 0x1u) != 0)) && string.Equals(key, "owin.Version", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x1u;
                        OwinVersion = default(string);
                        _flag0 &= ~0x1u;
                        return true;
                    }
                    if ((((_flag0 & 0x8000u) != 0) || !((_initFlag0 & 0x8000u) != 0)) && string.Equals(key, "host.AppName", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x8000u;
                        HostAppName = default(string);
                        _flag0 &= ~0x8000u;
                        return true;
                    }
                    if ((((_flag0 & 0x10000u) != 0) || !((_initFlag0 & 0x10000u) != 0)) && string.Equals(key, "host.AppMode", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x10000u;
                        HostAppMode = default(string);
                        _flag0 &= ~0x10000u;
                        return true;
                    }
                   break;
                case 18:
                    if ((((_flag0 & 0x2u) != 0) || !((_initFlag0 & 0x2u) != 0)) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x2u;
                        CallCancelled = default(CancellationToken);
                        _flag0 &= ~0x2u;
                        return true;
                    }
                    if ((((_flag0 & 0x8u) != 0) || !((_initFlag0 & 0x8u) != 0)) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x8u;
                        RequestMethod = default(string);
                        _flag0 &= ~0x8u;
                        return true;
                    }
                    if ((((_flag0 & 0x10u) != 0) || !((_initFlag0 & 0x10u) != 0)) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x10u;
                        RequestScheme = default(string);
                        _flag0 &= ~0x10u;
                        return true;
                    }
                    if ((((_flag0 & 0x20000000u) != 0) || !((_initFlag0 & 0x20000000u) != 0)) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x20000000u;
                        SendFileAsync = default(Func<string, long, long?, Task>);
                        _flag0 &= ~0x20000000u;
                        return true;
                    }
                   break;
                case 20:
                    if ((((_flag0 & 0x4u) != 0) || !((_initFlag0 & 0x4u) != 0)) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x4u;
                        RequestProtocol = default(string);
                        _flag0 &= ~0x4u;
                        return true;
                    }
                    if ((((_flag0 & 0x20u) != 0) || !((_initFlag0 & 0x20u) != 0)) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x20u;
                        RequestPathBase = default(string);
                        _flag0 &= ~0x20u;
                        return true;
                    }
                    if ((((_flag0 & 0x1000u) != 0) || !((_initFlag0 & 0x1000u) != 0)) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x1000u;
                        ResponseHeaders = default(IDictionary<string, string[]>);
                        _flag0 &= ~0x1000u;
                        return true;
                    }
                   break;
                case 16:
                    if ((((_flag0 & 0x40u) != 0) || !((_initFlag0 & 0x40u) != 0)) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x40u;
                        RequestPath = default(string);
                        _flag0 &= ~0x40u;
                        return true;
                    }
                    if ((((_flag0 & 0x200u) != 0) || !((_initFlag0 & 0x200u) != 0)) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x200u;
                        RequestBody = default(Stream);
                        _flag0 &= ~0x200u;
                        return true;
                    }
                    if ((((_flag0 & 0x4000u) != 0) || !((_initFlag0 & 0x4000u) != 0)) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x4000u;
                        HostTraceOutput = default(TextWriter);
                        _flag0 &= ~0x4000u;
                        return true;
                    }
                    if ((((_flag0 & 0x2000000u) != 0) || !((_initFlag0 & 0x2000000u) != 0)) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x2000000u;
                        ServerLocalPort = default(string);
                        _flag0 &= ~0x2000000u;
                        return true;
                    }
                    if ((((_flag0 & 0x40000000u) != 0) || !((_initFlag0 & 0x40000000u) != 0)) && string.Equals(key, "websocket.Accept", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x40000000u;
                        WebSocketAccept = default(object);
                        _flag0 &= ~0x40000000u;
                        return true;
                    }
                   break;
                case 23:
                    if ((((_flag0 & 0x80u) != 0) || !((_initFlag0 & 0x80u) != 0)) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x80u;
                        RequestQueryString = default(string);
                        _flag0 &= ~0x80u;
                        return true;
                    }
                    if ((((_flag0 & 0x400u) != 0) || !((_initFlag0 & 0x400u) != 0)) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x400u;
                        ResponseStatusCode = default(int);
                        _flag0 &= ~0x400u;
                        return true;
                    }
                    if ((((_flag0 & 0x100000u) != 0) || !((_initFlag0 & 0x100000u) != 0)) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x100000u;
                        OnSendingHeaders = default(Action<Action<object>, object>);
                        _flag0 &= ~0x100000u;
                        return true;
                    }
                    if ((((_flag0 & 0x10000000u) != 0) || !((_initFlag0 & 0x10000000u) != 0)) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x10000000u;
                        LoadClientCert = default(Func<Task>);
                        _flag0 &= ~0x10000000u;
                        return true;
                    }
                   break;
                case 19:
                    if ((((_flag0 & 0x100u) != 0) || !((_initFlag0 & 0x100u) != 0)) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x100u;
                        RequestHeaders = default(IDictionary<string, string[]>);
                        _flag0 &= ~0x100u;
                        return true;
                    }
                    if ((((_flag0 & 0x20000u) != 0) || !((_initFlag0 & 0x20000u) != 0)) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x20000u;
                        OnAppDisposing = default(CancellationToken);
                        _flag0 &= ~0x20000u;
                        return true;
                    }
                    if ((((_flag0 & 0x200000u) != 0) || !((_initFlag0 & 0x200000u) != 0)) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x200000u;
                        ServerCapabilities = default(IDictionary<string, object>);
                        _flag0 &= ~0x200000u;
                        return true;
                    }
                   break;
                case 25:
                    if ((((_flag0 & 0x800u) != 0) || !((_initFlag0 & 0x800u) != 0)) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x800u;
                        ResponseReasonPhrase = default(string);
                        _flag0 &= ~0x800u;
                        return true;
                    }
                   break;
                case 17:
                    if ((((_flag0 & 0x2000u) != 0) || !((_initFlag0 & 0x2000u) != 0)) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x2000u;
                        ResponseBody = default(Stream);
                        _flag0 &= ~0x2000u;
                        return true;
                    }
                    if ((((_flag0 & 0x800000u) != 0) || !((_initFlag0 & 0x800000u) != 0)) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x800000u;
                        ServerRemotePort = default(string);
                        _flag0 &= ~0x800000u;
                        return true;
                    }
                   break;
                case 31:
                    if ((((_flag0 & 0x40000u) != 0) || !((_initFlag0 & 0x40000u) != 0)) && string.Equals(key, "server.DisableResponseBuffering", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x40000u;
                        ServerDisableResponseBuffering = default(Action);
                        _flag0 &= ~0x40000u;
                        return true;
                    }
                   break;
                case 11:
                    if ((((_flag0 & 0x80000u) != 0) || !((_initFlag0 & 0x80000u) != 0)) && string.Equals(key, "server.User", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x80000u;
                        ServerUser = default(System.Security.Principal.IPrincipal);
                        _flag0 &= ~0x80000u;
                        return true;
                    }
                   break;
                case 22:
                    if ((((_flag0 & 0x400000u) != 0) || !((_initFlag0 & 0x400000u) != 0)) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x400000u;
                        ServerRemoteIpAddress = default(string);
                        _flag0 &= ~0x400000u;
                        return true;
                    }
                   break;
                case 21:
                    if ((((_flag0 & 0x1000000u) != 0) || !((_initFlag0 & 0x1000000u) != 0)) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x1000000u;
                        ServerLocalIpAddress = default(string);
                        _flag0 &= ~0x1000000u;
                        return true;
                    }
                    if ((((_flag0 & 0x8000000u) != 0) || !((_initFlag0 & 0x8000000u) != 0)) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x8000000u;
                        ClientCert = default(X509Certificate);
                        _flag0 &= ~0x8000000u;
                        return true;
                    }
                   break;
                case 14:
                    if ((((_flag0 & 0x4000000u) != 0) || !((_initFlag0 & 0x4000000u) != 0)) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x4000000u;
                        ServerIsLocal = default(bool);
                        _flag0 &= ~0x4000000u;
                        return true;
                    }
                   break;
                case 33:
                    if ((((_flag0 & 0x80000000u) != 0) || !((_initFlag0 & 0x80000000u) != 0)) && string.Equals(key, "System.Web.Routing.RequestContext", StringComparison.Ordinal))
                    {
						_initFlag0 |= 0x80000000u;
                        RequestContext = default(RequestContext);
                        _flag0 &= ~0x80000000u;
                        return true;
                    }
                   break;
                case 26:
                    if ((((_flag1 & 0x1u) != 0) || !((_initFlag1 & 0x1u) != 0)) && string.Equals(key, "System.Web.HttpContextBase", StringComparison.Ordinal))
                    {
						_initFlag1 |= 0x1u;
                        HttpContextBase = default(HttpContextBase);
                        _flag1 &= ~0x1u;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
			if (!((_initFlag0 & 0x1u) != 0))
			{
				// Delay init
				object ignored = _OwinVersion;
			}
            if (((_flag0 & 0x1u) != 0))
            {
                yield return "owin.Version";
            }
			if (!((_initFlag0 & 0x2u) != 0))
			{
				// Delay init
				object ignored = _CallCancelled;
			}
            if (((_flag0 & 0x2u) != 0))
            {
                yield return "owin.CallCancelled";
            }
			if (!((_initFlag0 & 0x4u) != 0))
			{
				// Delay init
				object ignored = _RequestProtocol;
			}
            if (((_flag0 & 0x4u) != 0))
            {
                yield return "owin.RequestProtocol";
            }
			if (!((_initFlag0 & 0x8u) != 0))
			{
				// Delay init
				object ignored = _RequestMethod;
			}
            if (((_flag0 & 0x8u) != 0))
            {
                yield return "owin.RequestMethod";
            }
			if (!((_initFlag0 & 0x10u) != 0))
			{
				// Delay init
				object ignored = _RequestScheme;
			}
            if (((_flag0 & 0x10u) != 0))
            {
                yield return "owin.RequestScheme";
            }
			if (!((_initFlag0 & 0x20u) != 0))
			{
				// Delay init
				object ignored = _RequestPathBase;
			}
            if (((_flag0 & 0x20u) != 0))
            {
                yield return "owin.RequestPathBase";
            }
			if (!((_initFlag0 & 0x40u) != 0))
			{
				// Delay init
				object ignored = _RequestPath;
			}
            if (((_flag0 & 0x40u) != 0))
            {
                yield return "owin.RequestPath";
            }
			if (!((_initFlag0 & 0x80u) != 0))
			{
				// Delay init
				object ignored = _RequestQueryString;
			}
            if (((_flag0 & 0x80u) != 0))
            {
                yield return "owin.RequestQueryString";
            }
			if (!((_initFlag0 & 0x100u) != 0))
			{
				// Delay init
				object ignored = _RequestHeaders;
			}
            if (((_flag0 & 0x100u) != 0))
            {
                yield return "owin.RequestHeaders";
            }
			if (!((_initFlag0 & 0x200u) != 0))
			{
				// Delay init
				object ignored = _RequestBody;
			}
            if (((_flag0 & 0x200u) != 0))
            {
                yield return "owin.RequestBody";
            }
			if (!((_initFlag0 & 0x400u) != 0))
			{
				// Delay init
				object ignored = _ResponseStatusCode;
			}
            if (((_flag0 & 0x400u) != 0))
            {
                yield return "owin.ResponseStatusCode";
            }
			if (!((_initFlag0 & 0x800u) != 0))
			{
				// Delay init
				object ignored = _ResponseReasonPhrase;
			}
            if (((_flag0 & 0x800u) != 0))
            {
                yield return "owin.ResponseReasonPhrase";
            }
			if (!((_initFlag0 & 0x1000u) != 0))
			{
				// Delay init
				object ignored = _ResponseHeaders;
			}
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return "owin.ResponseHeaders";
            }
			if (!((_initFlag0 & 0x2000u) != 0))
			{
				// Delay init
				object ignored = _ResponseBody;
			}
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return "owin.ResponseBody";
            }
			if (!((_initFlag0 & 0x4000u) != 0))
			{
				// Delay init
				object ignored = _HostTraceOutput;
			}
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return "host.TraceOutput";
            }
			if (!((_initFlag0 & 0x8000u) != 0))
			{
				// Delay init
				object ignored = _HostAppName;
			}
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return "host.AppName";
            }
			if (!((_initFlag0 & 0x10000u) != 0))
			{
				// Delay init
				object ignored = _HostAppMode;
			}
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return "host.AppMode";
            }
			if (!((_initFlag0 & 0x20000u) != 0))
			{
				// Delay init
				object ignored = _OnAppDisposing;
			}
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return "host.OnAppDisposing";
            }
			if (!((_initFlag0 & 0x40000u) != 0))
			{
				// Delay init
				object ignored = _ServerDisableResponseBuffering;
			}
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return "server.DisableResponseBuffering";
            }
			if (!((_initFlag0 & 0x80000u) != 0))
			{
				// Delay init
				object ignored = _ServerUser;
			}
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return "server.User";
            }
			if (!((_initFlag0 & 0x100000u) != 0))
			{
				// Delay init
				object ignored = _OnSendingHeaders;
			}
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return "server.OnSendingHeaders";
            }
			if (!((_initFlag0 & 0x200000u) != 0))
			{
				// Delay init
				object ignored = _ServerCapabilities;
			}
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return "server.Capabilities";
            }
			if (!((_initFlag0 & 0x400000u) != 0))
			{
				// Delay init
				object ignored = _ServerRemoteIpAddress;
			}
            if (((_flag0 & 0x400000u) != 0))
            {
                yield return "server.RemoteIpAddress";
            }
			if (!((_initFlag0 & 0x800000u) != 0))
			{
				// Delay init
				object ignored = _ServerRemotePort;
			}
            if (((_flag0 & 0x800000u) != 0))
            {
                yield return "server.RemotePort";
            }
			if (!((_initFlag0 & 0x1000000u) != 0))
			{
				// Delay init
				object ignored = _ServerLocalIpAddress;
			}
            if (((_flag0 & 0x1000000u) != 0))
            {
                yield return "server.LocalIpAddress";
            }
			if (!((_initFlag0 & 0x2000000u) != 0))
			{
				// Delay init
				object ignored = _ServerLocalPort;
			}
            if (((_flag0 & 0x2000000u) != 0))
            {
                yield return "server.LocalPort";
            }
			if (!((_initFlag0 & 0x4000000u) != 0))
			{
				// Delay init
				object ignored = _ServerIsLocal;
			}
            if (((_flag0 & 0x4000000u) != 0))
            {
                yield return "server.IsLocal";
            }
			if (!((_initFlag0 & 0x8000000u) != 0))
			{
				// Delay init
				object ignored = _ClientCert;
			}
            if (((_flag0 & 0x8000000u) != 0))
            {
                yield return "ssl.ClientCertificate";
            }
			if (!((_initFlag0 & 0x10000000u) != 0))
			{
				// Delay init
				object ignored = _LoadClientCert;
			}
            if (((_flag0 & 0x10000000u) != 0))
            {
                yield return "ssl.LoadClientCertAsync";
            }
			if (!((_initFlag0 & 0x20000000u) != 0))
			{
				// Delay init
				object ignored = _SendFileAsync;
			}
            if (((_flag0 & 0x20000000u) != 0))
            {
                yield return "sendfile.SendAsync";
            }
			if (!((_initFlag0 & 0x40000000u) != 0))
			{
				// Delay init
				object ignored = _WebSocketAccept;
			}
            if (((_flag0 & 0x40000000u) != 0))
            {
                yield return "websocket.Accept";
            }
			if (!((_initFlag0 & 0x80000000u) != 0))
			{
				// Delay init
				object ignored = _RequestContext;
			}
            if (((_flag0 & 0x80000000u) != 0))
            {
                yield return "System.Web.Routing.RequestContext";
            }
			if (!((_initFlag1 & 0x1u) != 0))
			{
				// Delay init
				object ignored = _HttpContextBase;
			}
            if (((_flag1 & 0x1u) != 0))
            {
                yield return "System.Web.HttpContextBase";
            }
        }

        private IEnumerable<object> PropertiesValues()
        {
			if (!((_initFlag0 & 0x1u) != 0))
			{
				// Delay init
				object ignored = _OwinVersion;
			}
            if (((_flag0 & 0x1u) != 0) || !((_initFlag0 & 0x1u) != 0))
            {
                yield return OwinVersion;
            }
			if (!((_initFlag0 & 0x2u) != 0))
			{
				// Delay init
				object ignored = _CallCancelled;
			}
            if (((_flag0 & 0x2u) != 0) || !((_initFlag0 & 0x2u) != 0))
            {
                yield return CallCancelled;
            }
			if (!((_initFlag0 & 0x4u) != 0))
			{
				// Delay init
				object ignored = _RequestProtocol;
			}
            if (((_flag0 & 0x4u) != 0) || !((_initFlag0 & 0x4u) != 0))
            {
                yield return RequestProtocol;
            }
			if (!((_initFlag0 & 0x8u) != 0))
			{
				// Delay init
				object ignored = _RequestMethod;
			}
            if (((_flag0 & 0x8u) != 0) || !((_initFlag0 & 0x8u) != 0))
            {
                yield return RequestMethod;
            }
			if (!((_initFlag0 & 0x10u) != 0))
			{
				// Delay init
				object ignored = _RequestScheme;
			}
            if (((_flag0 & 0x10u) != 0) || !((_initFlag0 & 0x10u) != 0))
            {
                yield return RequestScheme;
            }
			if (!((_initFlag0 & 0x20u) != 0))
			{
				// Delay init
				object ignored = _RequestPathBase;
			}
            if (((_flag0 & 0x20u) != 0) || !((_initFlag0 & 0x20u) != 0))
            {
                yield return RequestPathBase;
            }
			if (!((_initFlag0 & 0x40u) != 0))
			{
				// Delay init
				object ignored = _RequestPath;
			}
            if (((_flag0 & 0x40u) != 0) || !((_initFlag0 & 0x40u) != 0))
            {
                yield return RequestPath;
            }
			if (!((_initFlag0 & 0x80u) != 0))
			{
				// Delay init
				object ignored = _RequestQueryString;
			}
            if (((_flag0 & 0x80u) != 0) || !((_initFlag0 & 0x80u) != 0))
            {
                yield return RequestQueryString;
            }
			if (!((_initFlag0 & 0x100u) != 0))
			{
				// Delay init
				object ignored = _RequestHeaders;
			}
            if (((_flag0 & 0x100u) != 0) || !((_initFlag0 & 0x100u) != 0))
            {
                yield return RequestHeaders;
            }
			if (!((_initFlag0 & 0x200u) != 0))
			{
				// Delay init
				object ignored = _RequestBody;
			}
            if (((_flag0 & 0x200u) != 0) || !((_initFlag0 & 0x200u) != 0))
            {
                yield return RequestBody;
            }
			if (!((_initFlag0 & 0x400u) != 0))
			{
				// Delay init
				object ignored = _ResponseStatusCode;
			}
            if (((_flag0 & 0x400u) != 0) || !((_initFlag0 & 0x400u) != 0))
            {
                yield return ResponseStatusCode;
            }
			if (!((_initFlag0 & 0x800u) != 0))
			{
				// Delay init
				object ignored = _ResponseReasonPhrase;
			}
            if (((_flag0 & 0x800u) != 0) || !((_initFlag0 & 0x800u) != 0))
            {
                yield return ResponseReasonPhrase;
            }
			if (!((_initFlag0 & 0x1000u) != 0))
			{
				// Delay init
				object ignored = _ResponseHeaders;
			}
            if (((_flag0 & 0x1000u) != 0) || !((_initFlag0 & 0x1000u) != 0))
            {
                yield return ResponseHeaders;
            }
			if (!((_initFlag0 & 0x2000u) != 0))
			{
				// Delay init
				object ignored = _ResponseBody;
			}
            if (((_flag0 & 0x2000u) != 0) || !((_initFlag0 & 0x2000u) != 0))
            {
                yield return ResponseBody;
            }
			if (!((_initFlag0 & 0x4000u) != 0))
			{
				// Delay init
				object ignored = _HostTraceOutput;
			}
            if (((_flag0 & 0x4000u) != 0) || !((_initFlag0 & 0x4000u) != 0))
            {
                yield return HostTraceOutput;
            }
			if (!((_initFlag0 & 0x8000u) != 0))
			{
				// Delay init
				object ignored = _HostAppName;
			}
            if (((_flag0 & 0x8000u) != 0) || !((_initFlag0 & 0x8000u) != 0))
            {
                yield return HostAppName;
            }
			if (!((_initFlag0 & 0x10000u) != 0))
			{
				// Delay init
				object ignored = _HostAppMode;
			}
            if (((_flag0 & 0x10000u) != 0) || !((_initFlag0 & 0x10000u) != 0))
            {
                yield return HostAppMode;
            }
			if (!((_initFlag0 & 0x20000u) != 0))
			{
				// Delay init
				object ignored = _OnAppDisposing;
			}
            if (((_flag0 & 0x20000u) != 0) || !((_initFlag0 & 0x20000u) != 0))
            {
                yield return OnAppDisposing;
            }
			if (!((_initFlag0 & 0x40000u) != 0))
			{
				// Delay init
				object ignored = _ServerDisableResponseBuffering;
			}
            if (((_flag0 & 0x40000u) != 0) || !((_initFlag0 & 0x40000u) != 0))
            {
                yield return ServerDisableResponseBuffering;
            }
			if (!((_initFlag0 & 0x80000u) != 0))
			{
				// Delay init
				object ignored = _ServerUser;
			}
            if (((_flag0 & 0x80000u) != 0) || !((_initFlag0 & 0x80000u) != 0))
            {
                yield return ServerUser;
            }
			if (!((_initFlag0 & 0x100000u) != 0))
			{
				// Delay init
				object ignored = _OnSendingHeaders;
			}
            if (((_flag0 & 0x100000u) != 0) || !((_initFlag0 & 0x100000u) != 0))
            {
                yield return OnSendingHeaders;
            }
			if (!((_initFlag0 & 0x200000u) != 0))
			{
				// Delay init
				object ignored = _ServerCapabilities;
			}
            if (((_flag0 & 0x200000u) != 0) || !((_initFlag0 & 0x200000u) != 0))
            {
                yield return ServerCapabilities;
            }
			if (!((_initFlag0 & 0x400000u) != 0))
			{
				// Delay init
				object ignored = _ServerRemoteIpAddress;
			}
            if (((_flag0 & 0x400000u) != 0) || !((_initFlag0 & 0x400000u) != 0))
            {
                yield return ServerRemoteIpAddress;
            }
			if (!((_initFlag0 & 0x800000u) != 0))
			{
				// Delay init
				object ignored = _ServerRemotePort;
			}
            if (((_flag0 & 0x800000u) != 0) || !((_initFlag0 & 0x800000u) != 0))
            {
                yield return ServerRemotePort;
            }
			if (!((_initFlag0 & 0x1000000u) != 0))
			{
				// Delay init
				object ignored = _ServerLocalIpAddress;
			}
            if (((_flag0 & 0x1000000u) != 0) || !((_initFlag0 & 0x1000000u) != 0))
            {
                yield return ServerLocalIpAddress;
            }
			if (!((_initFlag0 & 0x2000000u) != 0))
			{
				// Delay init
				object ignored = _ServerLocalPort;
			}
            if (((_flag0 & 0x2000000u) != 0) || !((_initFlag0 & 0x2000000u) != 0))
            {
                yield return ServerLocalPort;
            }
			if (!((_initFlag0 & 0x4000000u) != 0))
			{
				// Delay init
				object ignored = _ServerIsLocal;
			}
            if (((_flag0 & 0x4000000u) != 0) || !((_initFlag0 & 0x4000000u) != 0))
            {
                yield return ServerIsLocal;
            }
			if (!((_initFlag0 & 0x8000000u) != 0))
			{
				// Delay init
				object ignored = _ClientCert;
			}
            if (((_flag0 & 0x8000000u) != 0) || !((_initFlag0 & 0x8000000u) != 0))
            {
                yield return ClientCert;
            }
			if (!((_initFlag0 & 0x10000000u) != 0))
			{
				// Delay init
				object ignored = _LoadClientCert;
			}
            if (((_flag0 & 0x10000000u) != 0) || !((_initFlag0 & 0x10000000u) != 0))
            {
                yield return LoadClientCert;
            }
			if (!((_initFlag0 & 0x20000000u) != 0))
			{
				// Delay init
				object ignored = _SendFileAsync;
			}
            if (((_flag0 & 0x20000000u) != 0) || !((_initFlag0 & 0x20000000u) != 0))
            {
                yield return SendFileAsync;
            }
			if (!((_initFlag0 & 0x40000000u) != 0))
			{
				// Delay init
				object ignored = _WebSocketAccept;
			}
            if (((_flag0 & 0x40000000u) != 0) || !((_initFlag0 & 0x40000000u) != 0))
            {
                yield return WebSocketAccept;
            }
			if (!((_initFlag0 & 0x80000000u) != 0))
			{
				// Delay init
				object ignored = _RequestContext;
			}
            if (((_flag0 & 0x80000000u) != 0) || !((_initFlag0 & 0x80000000u) != 0))
            {
                yield return RequestContext;
            }
			if (!((_initFlag1 & 0x1u) != 0))
			{
				// Delay init
				object ignored = _HttpContextBase;
			}
            if (((_flag1 & 0x1u) != 0) || !((_initFlag1 & 0x1u) != 0))
            {
                yield return HttpContextBase;
            }
        }

        private IEnumerable<KeyValuePair<string, object>> PropertiesEnumerable()
        {
			if (!((_initFlag0 & 0x1u) != 0))
			{
				// Delay init
				object ignored = _OwinVersion;
			}
            if (((_flag0 & 0x1u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.Version", OwinVersion);
            }
			if (!((_initFlag0 & 0x2u) != 0))
			{
				// Delay init
				object ignored = _CallCancelled;
			}
            if (((_flag0 & 0x2u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.CallCancelled", CallCancelled);
            }
			if (!((_initFlag0 & 0x4u) != 0))
			{
				// Delay init
				object ignored = _RequestProtocol;
			}
            if (((_flag0 & 0x4u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestProtocol", RequestProtocol);
            }
			if (!((_initFlag0 & 0x8u) != 0))
			{
				// Delay init
				object ignored = _RequestMethod;
			}
            if (((_flag0 & 0x8u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestMethod", RequestMethod);
            }
			if (!((_initFlag0 & 0x10u) != 0))
			{
				// Delay init
				object ignored = _RequestScheme;
			}
            if (((_flag0 & 0x10u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestScheme", RequestScheme);
            }
			if (!((_initFlag0 & 0x20u) != 0))
			{
				// Delay init
				object ignored = _RequestPathBase;
			}
            if (((_flag0 & 0x20u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestPathBase", RequestPathBase);
            }
			if (!((_initFlag0 & 0x40u) != 0))
			{
				// Delay init
				object ignored = _RequestPath;
			}
            if (((_flag0 & 0x40u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestPath", RequestPath);
            }
			if (!((_initFlag0 & 0x80u) != 0))
			{
				// Delay init
				object ignored = _RequestQueryString;
			}
            if (((_flag0 & 0x80u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestQueryString", RequestQueryString);
            }
			if (!((_initFlag0 & 0x100u) != 0))
			{
				// Delay init
				object ignored = _RequestHeaders;
			}
            if (((_flag0 & 0x100u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestHeaders", RequestHeaders);
            }
			if (!((_initFlag0 & 0x200u) != 0))
			{
				// Delay init
				object ignored = _RequestBody;
			}
            if (((_flag0 & 0x200u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestBody", RequestBody);
            }
			if (!((_initFlag0 & 0x400u) != 0))
			{
				// Delay init
				object ignored = _ResponseStatusCode;
			}
            if (((_flag0 & 0x400u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseStatusCode", ResponseStatusCode);
            }
			if (!((_initFlag0 & 0x800u) != 0))
			{
				// Delay init
				object ignored = _ResponseReasonPhrase;
			}
            if (((_flag0 & 0x800u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseReasonPhrase", ResponseReasonPhrase);
            }
			if (!((_initFlag0 & 0x1000u) != 0))
			{
				// Delay init
				object ignored = _ResponseHeaders;
			}
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseHeaders", ResponseHeaders);
            }
			if (!((_initFlag0 & 0x2000u) != 0))
			{
				// Delay init
				object ignored = _ResponseBody;
			}
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseBody", ResponseBody);
            }
			if (!((_initFlag0 & 0x4000u) != 0))
			{
				// Delay init
				object ignored = _HostTraceOutput;
			}
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.TraceOutput", HostTraceOutput);
            }
			if (!((_initFlag0 & 0x8000u) != 0))
			{
				// Delay init
				object ignored = _HostAppName;
			}
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.AppName", HostAppName);
            }
			if (!((_initFlag0 & 0x10000u) != 0))
			{
				// Delay init
				object ignored = _HostAppMode;
			}
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.AppMode", HostAppMode);
            }
			if (!((_initFlag0 & 0x20000u) != 0))
			{
				// Delay init
				object ignored = _OnAppDisposing;
			}
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.OnAppDisposing", OnAppDisposing);
            }
			if (!((_initFlag0 & 0x40000u) != 0))
			{
				// Delay init
				object ignored = _ServerDisableResponseBuffering;
			}
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.DisableResponseBuffering", ServerDisableResponseBuffering);
            }
			if (!((_initFlag0 & 0x80000u) != 0))
			{
				// Delay init
				object ignored = _ServerUser;
			}
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.User", ServerUser);
            }
			if (!((_initFlag0 & 0x100000u) != 0))
			{
				// Delay init
				object ignored = _OnSendingHeaders;
			}
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.OnSendingHeaders", OnSendingHeaders);
            }
			if (!((_initFlag0 & 0x200000u) != 0))
			{
				// Delay init
				object ignored = _ServerCapabilities;
			}
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.Capabilities", ServerCapabilities);
            }
			if (!((_initFlag0 & 0x400000u) != 0))
			{
				// Delay init
				object ignored = _ServerRemoteIpAddress;
			}
            if (((_flag0 & 0x400000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.RemoteIpAddress", ServerRemoteIpAddress);
            }
			if (!((_initFlag0 & 0x800000u) != 0))
			{
				// Delay init
				object ignored = _ServerRemotePort;
			}
            if (((_flag0 & 0x800000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.RemotePort", ServerRemotePort);
            }
			if (!((_initFlag0 & 0x1000000u) != 0))
			{
				// Delay init
				object ignored = _ServerLocalIpAddress;
			}
            if (((_flag0 & 0x1000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.LocalIpAddress", ServerLocalIpAddress);
            }
			if (!((_initFlag0 & 0x2000000u) != 0))
			{
				// Delay init
				object ignored = _ServerLocalPort;
			}
            if (((_flag0 & 0x2000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.LocalPort", ServerLocalPort);
            }
			if (!((_initFlag0 & 0x4000000u) != 0))
			{
				// Delay init
				object ignored = _ServerIsLocal;
			}
            if (((_flag0 & 0x4000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.IsLocal", ServerIsLocal);
            }
			if (!((_initFlag0 & 0x8000000u) != 0))
			{
				// Delay init
				object ignored = _ClientCert;
			}
            if (((_flag0 & 0x8000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("ssl.ClientCertificate", ClientCert);
            }
			if (!((_initFlag0 & 0x10000000u) != 0))
			{
				// Delay init
				object ignored = _LoadClientCert;
			}
            if (((_flag0 & 0x10000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("ssl.LoadClientCertAsync", LoadClientCert);
            }
			if (!((_initFlag0 & 0x20000000u) != 0))
			{
				// Delay init
				object ignored = _SendFileAsync;
			}
            if (((_flag0 & 0x20000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("sendfile.SendAsync", SendFileAsync);
            }
			if (!((_initFlag0 & 0x40000000u) != 0))
			{
				// Delay init
				object ignored = _WebSocketAccept;
			}
            if (((_flag0 & 0x40000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("websocket.Accept", WebSocketAccept);
            }
			if (!((_initFlag0 & 0x80000000u) != 0))
			{
				// Delay init
				object ignored = _RequestContext;
			}
            if (((_flag0 & 0x80000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("System.Web.Routing.RequestContext", RequestContext);
            }
			if (!((_initFlag1 & 0x1u) != 0))
			{
				// Delay init
				object ignored = _HttpContextBase;
			}
            if (((_flag1 & 0x1u) != 0))
            {
                yield return new KeyValuePair<string, object>("System.Web.HttpContextBase", HttpContextBase);
            }
        }
    }
}
