
var PROJECT='Katana'
var AUTHORS='${PROJECT} contributors'

var VERSION='1.0'
var DEV_VERSION='0.19'

var PRE_VERSION=''
var DEV_PRE_VERSION='-alpha'

var FULL_VERSION='${VERSION}${PRE_VERSION}'
var FILE_VERSION='${VERSION}.${BuildDate()}.${BuildNumber()}'

var FULL_DEV_VERSION='${DEV_VERSION}${DEV_PRE_VERSION}'
var FILE_DEV_VERSION='${DEV_VERSION}.${BuildDate()}.${BuildNumber()}'

var BASE_DIR='${Directory.GetCurrentDirectory()}'
var TARGET_DIR='${Path.Combine(BASE_DIR, "target")}'
var BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
var TEST_DIR='${Path.Combine(TARGET_DIR, "test")}'

var KEY_FILE='${Files.Include("*.snk").Select(x=>Path.Combine(BASE_DIR,x)).SingleOrDefault()}'

var NUGET_GALLERY_SOURCE='https://nuget.org/api/v2/'
var NUGET_ASPNET_SOURCE='http://www.myget.org/F/aspnetwebstacknightly/'

var NUGET_DEPLOY='http://www.myget.org/F/katana/'


log info='PROJECT: ${PROJECT}' if='PROJECT != ""'
log info='VERSION: ${VERSION}' if='VERSION != ""'
log info='FULL_VERSION: ${FULL_VERSION}' if='FULL_VERSION != ""'
log info='FILE_VERSION: ${FILE_VERSION}' if='FILE_VERSION != ""'
log info='DEV_VERSION: ${DEV_VERSION}' if='DEV_VERSION != ""'
log info='FULL_DEV_VERSION: ${FULL_DEV_VERSION}' if='FULL_DEV_VERSION != ""'
log info='FILE_DEV_VERSION: ${FILE_DEV_VERSION}' if='FILE_DEV_VERSION != ""'
log info='KEY_FILE: ${KEY_FILE}' if='KEY_FILE != ""'

functions
  @{
    string BuildDate()
    {
      var now = DateTime.Now;
      return (now.Year - 2011) + DateTime.Now.ToString("MMdd");
    }
    string BuildNumber()
    {
      var buildNumber = Environment.GetEnvironmentVariable("BUILD_NUMBER");
      if (string.IsNullOrEmpty(buildNumber))
        return "0";
      return buildNumber;
    }
  }

var skip="${new[] { 
    "./**/*.Sample.*.csproj",
    "./**/*.HttpListener.Tests.csproj",
  }}"

set if='IsMono' skip='${new[]{
    "./**/Microsoft.AspNet.WebApi.Owin.csproj",
    "./**/Microsoft.Owin.WebSockets.csproj",
    "./**/*.Sample.*.csproj",
    "./**/Katana.Server.AspNet.*.csproj",
    "./**/*.Tests.csproj",
  }}'

var BUILD_PROJECTS='${Files.Include("src/**/*.csproj").Include("tests/Katana.Performance.ReferenceApp/Katana.Performance.ReferenceApp.csproj").Exclude(skip)}'
var TEST_PROJECTS='${Files.Include("tests/**/*.Tests.csproj").Include("tests/**/*.IntegrationTests.csproj").Exclude("tests/**/*.HttpListener.Tests.csproj")}'

test if='IsMono'
  set TEST_PROJECTS='${Files.Include("./**/Katana.Engine.Tests.csproj")}'

-// include range of standard general targets. run "sake targets" to display
use-standard-lifecycle

-// include sets of standard work targets. features include 'nuget,xunit,nunit'
use-standard-goals features='nuget,xunit,stylecop'

-// additional work targets are defined below

#net45-generate target='post-clean'
  apply-net45-changes sourceFile='src/Microsoft.Owin.Host.SystemWeb/Microsoft.Owin.Host.SystemWeb.csproj' destinationFile='src/Microsoft.Owin.Host.SystemWeb/Microsoft.Owin.Host.SystemWeb45.csproj'
  apply-net45-changes sourceFile='src/Microsoft.Owin.Host.HttpListener/Microsoft.Owin.Host.HttpListener.csproj' destinationFile='src/Microsoft.Owin.Host.HttpListener/Microsoft.Owin.Host.HttpListener45.csproj'
  apply-net45-changes sourceFile='tests/Microsoft.Owin.Host.SystemWeb.Tests/Microsoft.Owin.Host.SystemWeb.Tests.csproj' destinationFile='tests/Microsoft.Owin.Host.SystemWeb.Tests/Microsoft.Owin.Host.SystemWeb45.Tests.csproj'
  apply-net45-changes sourceFile='tests/Microsoft.Owin.Host.IntegrationTests/Microsoft.Owin.Host40.IntegrationTests.csproj' destinationFile='tests/Microsoft.Owin.Host.IntegrationTests/Microsoft.Owin.Host45.IntegrationTests.csproj'

var assemblyInfoFiles='${Files.Include("./build/CommonAssemblyInfo.cs")}'
  #assemblyinfo-initialize target='initialize' if='KEY_FILE != ""'
    var assemblyVersion='${VERSION.Split((char)'.').FirstOrDefault()}'
    var assemblyFileVersion='${FILE_VERSION}'
    var assemblyInformationalVersion='${FULL_VERSION}'
    -// var assemblyCompany='${AUTHORS}'
    -// var assemblyCopyright='Copyright 2011-${DateTime.Now.Year} ${AUTHORS}' 
    assemblyinfo each='var updateFile in assemblyInfoFiles' 

  #assemblyinfo-dev-initialize target='initialize' if='KEY_FILE != ""'
    var assemblyVersion='${DEV_VERSION.Split((char)'.').FirstOrDefault()}'
    var assemblyFileVersion='${FILE_DEV_VERSION}'
    var assemblyInformationalVersion='${FULL_DEV_VERSION}'
    -// var assemblyCompany='${AUTHORS}'
    -// var assemblyCopyright='Copyright 2011-${DateTime.Now.Year} ${AUTHORS}' 
    assemblyinfo each='var updateFile in Files.Include("src/**/*AssemblyInfo.cs", "tests/**/*AssemblyInfo.cs").Exclude(assemblyInfoFiles.ToArray())' 

#build-compile target='compile' description='Compile primary project'
  for each='var projectFile in BUILD_PROJECTS.Except(TEST_PROJECTS)' 
    var outputDir='${Path.Combine(BUILD_DIR, Path.GetFileNameWithoutExtension(projectFile))}'

    test if='KEY_FILE != "" && projectFile.Contains("Microsoft.")'
      build configuration='Release' extra='/t:Rebuild "/p:KeyFile=${KEY_FILE}"'
    else
      build configuration='Release' extra='/t:Rebuild'

    copy sourceDir='${Path.GetDirectoryName(projectFile)}' include='*.nuspec' overwrite='${true}'


#nuget-initialize target='initialize'
  nuget-install each='var package in Files.Include("src/**/packages.config")' outputDir='packages' extra='-Source ${NUGET_GALLERY_SOURCE};${NUGET_ASPNET_SOURCE} -NoCache'

#nuget-package target='package' description='Create NuGet packages'
  for each='var file in Files.Include("target/build/**/*.nuspec")'
    var baseName='${Path.GetFileNameWithoutExtension(file)}'
    nuget-pack nuspecFile='${file}' packageVersion='${FULL_DEV_VERSION}' outputDir='${TARGET_DIR}' extra='-NoPackageAnalysis -Properties "id=${baseName};authors=${AUTHORS};author=${AUTHORS};title=${baseName};description=${baseName}"'

#nuget-deploy target='deploy' description='Upload NuGet packages to gallery'
  var extra=''
  set extra='${extra} -Source ${NUGET_DEPLOY}' if='!string.IsNullOrEmpty(NUGET_DEPLOY)'
  nuget-push each='var nupkgFile in Files.Include("target/*.nupkg")'

#template-package target='package' 
  var csprojPattern='target/templates/**/*.csproj'
  var vstemplatePattern='target/templates/**/*.vstemplate'
  var vscontentPattern='target/templates/**/*.vscontent'
  var vsixmanifestPattern='target/templates/**/*.vsixmanifest'

  copy sourceDir='templates' outputDir='target/templates' include='**/*' overwrite='${true}'

  update-file each='var updateFile in Files.Include(vstemplatePattern, csprojPattern, vsixmanifestPattern)'
    @{
      updateText = updateText
        .Replace('$FULL_DEV_VERSION$', FULL_DEV_VERSION)
        .Replace('$FILE_DEV_VERSION$', FILE_DEV_VERSION);
    }

  package-vstemplate each='var subjectFile in Files.Include(vstemplatePattern)' outputDir='target/templates/Katana/ProjectTemplates/CSharp/1033'
  
  copy outputDir='target/templates/Katana' sourceDir='.' include='LICENSE.txt' overwrite='${true}'
  package-vsixmanifest each='var subjectFile in Files.Include(vsixmanifestPattern)'


#xunit-integration-test target="integration-test" description='Run xunit tests'
  var INTEGRATIONTEST_ASSEMBLIES='${Files.Include("target/test/**/*.IntegrationTests.dll")}'
  xunit each='var testFile in INTEGRATIONTEST_ASSEMBLIES'

#release
  @{
    // To publish, call `build release deploy`
    NUGET_DEPLOY = '';
  }

#fix-nuget
  update-file each='var updateFile in Files.Include("./**/*.csproj")'
    log info='${updateFile}'
    -updateText = updateText.Replace('  <Import Project="$(SolutionDir)\\.nuget\\nuget.targets" />\r\n', '');
