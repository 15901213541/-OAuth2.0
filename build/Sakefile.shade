
var PROJECT='Katana'
var AUTHORS='Microsoft Open Technologies, Inc.'

var VERSION='1.0'
var DEV_VERSION='0.20'

var PRE_VERSION=''
var DEV_PRE_VERSION='-alpha'

var BASE_DIR='${Directory.GetCurrentDirectory()}'
var KEY_FILE='${Files.Include("*.snk").Select(x=>Path.Combine(BASE_DIR,x)).SingleOrDefault()}'
var OFFICIAL_BUILD='${!string.IsNullOrEmpty(KEY_FILE)}'

set DEV_PRE_VERSION='${DEV_PRE_VERSION + "-" + BuildDate() + "-" + BuildNumber()}'

var FULL_VERSION='${VERSION}${PRE_VERSION}'
var FILE_VERSION='${VERSION}.${BuildDate()}.${BuildNumber()}'

var FULL_DEV_VERSION='${DEV_VERSION}${DEV_PRE_VERSION}'
var FILE_DEV_VERSION='${DEV_VERSION}.${BuildDate()}.${BuildNumber()}'

var TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
var BUILD_DIR='${Path.Combine(TARGET_DIR, "compile")}'
var TEST_DIR='${Path.Combine(TARGET_DIR, "test")}'
var SIGN_DIR='${Path.Combine(TARGET_DIR, "sign")}'
var PACKAGE_DIR='${Path.Combine(TARGET_DIR, "package")}'
var TEMPLATES_DIR='${Path.Combine(TARGET_DIR, "templates")}'


var NUGET_GALLERY_SOURCE='https://nuget.org/api/v2/'
var NUGET_ASPNET_SOURCE='http://www.myget.org/F/aspnetwebstacknightly/'
var NUGET_OWIN_SOURCE='http://www.myget.org/F/owin/'

var NUGET_DEPLOY='http://www.myget.org/F/katana/'



log info='PROJECT: ${PROJECT}' if='PROJECT != ""'
log info='VERSION: ${VERSION}' if='VERSION != ""'
log info='FULL_VERSION: ${FULL_VERSION}' if='FULL_VERSION != ""'
log info='FILE_VERSION: ${FILE_VERSION}' if='FILE_VERSION != ""'
log info='DEV_VERSION: ${DEV_VERSION}' if='DEV_VERSION != ""'
log info='FULL_DEV_VERSION: ${FULL_DEV_VERSION}' if='FULL_DEV_VERSION != ""'
log info='FILE_DEV_VERSION: ${FILE_DEV_VERSION}' if='FILE_DEV_VERSION != ""'
log info='KEY_FILE: ${KEY_FILE}' if='KEY_FILE != ""'
log info='OFFICIAL_BUILD: ${OFFICIAL_BUILD}' 

functions
  @{
    string BuildDate()
    {
      var now = DateTime.Now;
      return (now.Year - 2011) + DateTime.Now.ToString("MMdd");
    }
    string BuildNumber()
    {
      var buildNumber = Environment.GetEnvironmentVariable("BUILD_NUMBER");
      if (string.IsNullOrEmpty(buildNumber))
        return "0";
      return buildNumber;
    }
  }

var skip="${new[] { 
    "./**/*.Sample.*.csproj",
  }}"

set if='IsMono' skip='${new[]{
    "./**/Microsoft.AspNet.WebApi.Owin.csproj",
    "./**/Microsoft.Owin.WebSockets.csproj",
    "./**/*.Sample.*.csproj",
    "./**/Katana.Server.AspNet.*.csproj",
    "./**/*.Tests.csproj",
  }}'

var BUILD_PROJECTS='${Files.Include("src/**/*.csproj").Include("tests/Katana.Performance.ReferenceApp/Katana.Performance.ReferenceApp.csproj").Exclude(skip)}'
var TEST_PROJECTS='${Files.Include("tests/**/*.Tests.csproj").Include("tests/**/*.IntegrationTests.csproj")}'
var TEST_ASSEMBLIES='${Files.Include(TEST_DIR + "/**/*.Tests.dll")}'

test if='IsMono'
  set TEST_PROJECTS='${Files.Include("./**/Katana.Engine.Tests.csproj")}'

-// include range of standard general targets. run "sake targets" to display
use-standard-lifecycle

-// include sets of standard work targets. features include 'nuget,xunit,nunit'
use-standard-goals features='nuget,xunit,stylecop'

-// additional work targets are defined below

#net45-generate target='post-clean'
  apply-net45-changes sourceFile='src/Microsoft.Owin.Host.SystemWeb/Microsoft.Owin.Host.SystemWeb.csproj' destinationFile='src/Microsoft.Owin.Host.SystemWeb/Microsoft.Owin.Host.SystemWeb45.csproj'
  apply-net45-changes sourceFile='src/Microsoft.Owin.Host.HttpListener/Microsoft.Owin.Host.HttpListener.csproj' destinationFile='src/Microsoft.Owin.Host.HttpListener/Microsoft.Owin.Host.HttpListener45.csproj'
  apply-net45-changes sourceFile='tests/Microsoft.Owin.Host.SystemWeb.Tests/Microsoft.Owin.Host.SystemWeb.Tests.csproj' destinationFile='tests/Microsoft.Owin.Host.SystemWeb.Tests/Microsoft.Owin.Host.SystemWeb45.Tests.csproj'
  apply-net45-changes sourceFile='tests/Microsoft.Owin.Host.IntegrationTests/Microsoft.Owin.Host40.IntegrationTests.csproj' destinationFile='tests/Microsoft.Owin.Host.IntegrationTests/Microsoft.Owin.Host45.IntegrationTests.csproj'

var assemblyInfoFiles='${Files.Include("./build/CommonAssemblyInfo.cs")}'
  #assemblyinfo-initialize target='initialize' if='KEY_FILE != ""'
    var assemblyVersion='${VERSION.Split((char)'.').FirstOrDefault()}'
    var assemblyFileVersion='${FILE_VERSION}'
    var assemblyInformationalVersion='${FULL_VERSION}'
    var assemblyCopyright='(c) 2011-${DateTime.Now.Year} ${AUTHORS} All rights reserved.' 
    assemblyinfo each='var updateFile in assemblyInfoFiles' 

  #assemblyinfo-dev-initialize target='initialize'
    var assemblyVersion='${DEV_VERSION.Split((char)'.').FirstOrDefault()}'
    var assemblyFileVersion='${FILE_DEV_VERSION}'
    var assemblyInformationalVersion='${FULL_DEV_VERSION}'
    var assemblyCopyright='(c) 2011-${DateTime.Now.Year} ${AUTHORS} All rights reserved.' 
    assemblyinfo each='var updateFile in Files.Include("src/**/*AssemblyInfo.cs", "tests/**/*AssemblyInfo.cs", "./build/DevAssemblyInfo.cs")'

var signing='${new List<string>()}'

#build-compile target='compile' description='Compile primary project'
  for each='var projectFile in BUILD_PROJECTS.Except(TEST_PROJECTS)' 
    var outputDirName='${Path.GetFileNameWithoutExtension(projectFile)}'
    var outputFileName='${Path.GetFileName(Path.GetDirectoryName(projectFile))}.dll'

    var outputDir='${Path.Combine(BUILD_DIR, outputDirName)}'

    test if='KEY_FILE != ""'
      build configuration='Release' extra='/t:Rebuild "/p:KeyFile=${KEY_FILE}"'
    else
      build configuration='Release' extra='/t:Rebuild'

    copy sourceDir='${Path.GetDirectoryName(projectFile)}' include='*.nuspec' overwrite='${true}'

#sign-compile target='compile' description='Sign primary compiled outputs'
  @{
    Func<Action,Action,Action> and = (a,b)=>()=>{a();b();};
    Action copySigned = ()=>{};
  }

  test if='OFFICIAL_BUILD'
    directory create='${Path.Combine(SIGN_DIR, "input", "Net40")}'
    directory create='${Path.Combine(SIGN_DIR, "input", "Net45")}'
    directory create='${Path.Combine(SIGN_DIR, "output", "Net40")}'
    directory create='${Path.Combine(SIGN_DIR, "output", "Net45")}'
    for each='var assemblyFile in Files.BasePath(BUILD_DIR).Include("**/Microsoft.*.dll", "**/Katana.Boot.AspNet.dll")'
      var assemblyName='${Path.GetFileNameWithoutExtension(assemblyFile)}'
      var folderName='${Path.GetFileName(Path.GetDirectoryName(assemblyFile))}'

      var frameworkName=''
      set frameworkName='Net40' if='folderName == assemblyName '
      set frameworkName='Net45' if='folderName == assemblyName + "45"'

      test if='frameworkName != ""'
        log info='Signing ${frameworkName} ${assemblyFile}'
        @{
          var initialFile = Path.Combine(BUILD_DIR, assemblyFile);
          var inputFile = Path.Combine(SIGN_DIR, "input", frameworkName, assemblyName + ".dll");
          var outputFile = Path.Combine(SIGN_DIR, "output", frameworkName, assemblyName + ".dll");
          var finalFile = Path.Combine(PACKAGE_DIR, assemblyFile);

          File.Copy(initialFile, inputFile, true);
          copySigned = and(copySigned, ()=>File.Copy(outputFile, finalFile, true));
        }
    build projectFile='BuildServer.targets' configuration='Release' extra='/t:DoSignBinaries "/p:Sign=Sign;BranchName=Dev"'

  directory delete='${PACKAGE_DIR}'
  copy sourceDir='${BUILD_DIR}' outputDir='${PACKAGE_DIR}'
  -copySigned();


#nuget-initialize target='initialize'
  var extra='-Source ${NUGET_GALLERY_SOURCE};${NUGET_ASPNET_SOURCE};${NUGET_OWIN_SOURCE} -NoCache'
  nuget-install each='var package in Files.Include("src/**/packages.config","tests/**/packages.config")' outputDir='packages'

#nuget-package target='package' description='Create NuGet packages'
  for each='var file in Files.Include(PACKAGE_DIR + "/**/*.nuspec")'
    var doc='${XDocument.Load(file)}'
    var fileElts='${doc
        .Elements(XName.Get("package", "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"))
        .Elements(XName.Get("files", "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"))
        .Elements(XName.Get("file", "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"))}'
    for each='var fileElt in fileElts'
      var srcAttr='${fileElt.Attribute(XName.Get("src"))}'
      -if (srcAttr == null) continue;
      var segments='${srcAttr.Value.Split((char)'\\')}'
      -if (segments[0] != "..") continue;

      var up1='${Path.GetDirectoryName(file)}'
      var up2='${Path.GetDirectoryName(up1)}'
      log info='Copy ${segments[1]}'
      copy sourceDir='${Path.Combine(up2, segments[1])}' outputDir='${Path.Combine(up1, segments[1])}' exclude='*.nuspec' overwrite='${true}'
      -srcAttr.Value = srcAttr.Value.Substring(3);
    -doc.Save(file);

    var baseName='${Path.GetFileNameWithoutExtension(file)}'
    nuget-pack nuspecFile='${file}' packageVersion='${FULL_DEV_VERSION}' outputDir='${TARGET_DIR}' extra='-NoPackageAnalysis -Properties "id=${baseName};authors=${AUTHORS};author=${AUTHORS};title=${baseName};description=${baseName}"'

#nuget-deploy target='deploy' description='Upload NuGet packages to gallery'
  var extra=''
  set extra='${extra} -Source ${NUGET_DEPLOY}' if='!string.IsNullOrEmpty(NUGET_DEPLOY)'
  nuget-push each='var nupkgFile in Files.Include(Path.Combine(TARGET_DIR, "*.nupkg"))'

#template-package target='package' 
  var csprojPattern='${Path.Combine(TEMPLATES_DIR, "**/*.csproj")}'
  var vstemplatePattern='${Path.Combine(TEMPLATES_DIR, "**/*.vstemplate")}'
  var vscontentPattern='${Path.Combine(TEMPLATES_DIR, "**/*.vscontent")}'
  var vsixmanifestPattern='${Path.Combine(TEMPLATES_DIR, "**/*.vsixmanifest")}'

  copy sourceDir='templates' outputDir='${TEMPLATES_DIR}' include='**/*' overwrite='${true}'

  update-file each='var updateFile in Files.Include(vstemplatePattern, csprojPattern, vsixmanifestPattern)'
    @{
      updateText = updateText
        .Replace('$FULL_DEV_VERSION$', FULL_DEV_VERSION)
        .Replace('$FILE_DEV_VERSION$', FILE_DEV_VERSION);
    }

  package-vstemplate each='var subjectFile in Files.Include(vstemplatePattern)' outputDir='${Path.Combine(TEMPLATES_DIR, "Katana/ProjectTemplates/CSharp/1033")}'
  
  copy outputDir='${Path.Combine(TEMPLATES_DIR, "Katana")}' sourceDir='.' include='LICENSE.txt' overwrite='${true}'
  package-vsixmanifest each='var subjectFile in Files.Include(vsixmanifestPattern)'

#download-package target='package'
  var DOWNLOAD_DIR='${Path.Combine(TARGET_DIR, "download")}'
  var DOWNLOAD_FILE='${Path.Combine(TARGET_DIR, "Katana." + FULL_DEV_VERSION + ".zip")}'
  var includeFolders='${new[]{
    "Katana", 
    "Katana.WebDev.WebServer40", 
    "Katana.Boot.AspNet", 
    "Microsoft.Owin.Hosting",
    "Microsoft.Owin.Host.HttpListener"
  }}'
  var includeRoot='${new[]{"LICENSE.txt", "NOTICE.txt", "DISCLAIMER.txt"}}'
  var includeBin='${new[]{"*.config", "*.cmd", "NDesk.Options.dll", "Owin.dll"}}'
  var overwrite='${true}'

  copy outputDir='${DOWNLOAD_DIR}' sourceDir='${TARGET_DIR}' include='*.vsix'
  copy outputDir='${DOWNLOAD_DIR}' sourceDir='.' each='var include in includeRoot'
  for each='var folder in includeFolders'
    var outputDir='${DOWNLOAD_DIR}/bin' sourceDir='${PACKAGE_DIR}/${folder}' 
    copy include='${folder}.exe'
    copy include='${folder}.dll'
    copy each='var include in includeBin'

  log info='Compressing ${DOWNLOAD_DIR}'
  test if='File.Exists(DOWNLOAD_FILE)' -File.Delete(DOWNLOAD_FILE);
  -ZipFile.CreateFromDirectory(DOWNLOAD_DIR, DOWNLOAD_FILE);


#xunit-integration-test target="integration-test" description='Run xunit tests'
  var INTEGRATIONTEST_ASSEMBLIES='${Files.Include(Path.Combine(TEST_DIR, "**/*.IntegrationTests.dll"))}'
  xunit each='var testFile in INTEGRATIONTEST_ASSEMBLIES'

#release
  @{
    // To publish, call `build release deploy`
    NUGET_DEPLOY = '';
  }

#fix-nuget
  update-file each='var updateFile in Files.Include("./**/*.csproj")'
    log info='${updateFile}'
    -updateText = updateText.Replace('  <Import Project="$(SolutionDir)\\.nuget\\nuget.targets" />\r\n', '');
